
--- Using Fields in Searches ---

• What are Fields
• Using the Fields Sidebar
• Using Fields in Searches
• Boolean Operators
• Comparison Operators
• Difference between != and NOT
• Search Modes
• Search Best Practices


-- What are Fields --

• Fields are searchable name/value pairs in your event data.
• Searches using fields are more efficient than searches using keywords or quoted phrases.
• Fields can be extracted from data at index time and at search time.
  ✓ Index-time Extractions:
    ○ Metadata fields: host, source, sourcetype, index.
    ○ Internal fields: _time, _raw, etc.
    ○ Custom fields.
  ✓ Search-time Extractions:
    ○ Field Discovery
      ➤ Automatically discover fields based on sourcetype and name/value pairs in your data.
      ➤ Enabled by default.
    ○ Custom Fields.
    ○ Ad-hoc Search.

• Most data vendors have documentation for field name/value mappings that can be used to define extractions in Splunk.

• Run the query index=web sourcetype=access_combined for All time.
• Identify metadata fields host, source, sourcetype, index and internal fields _time, _raw.
• Change search mode to Fast to disable field discovery. Revert to re-enable field discovery.
• Identify data-specific fields for clientip, categoryId, status.

- Commands -

index=main sourcetype=eventgen nodeName=host05
index=main sourcetype=eventgen partner=Telco04 calleeNumber=5500*
index=main sourcetype=eventgen (nodeName=host05 OR nodeName=host07) responseCode>200 deviceMAC="*33:9f:dl:ed:66:20*"

index=web sourcetype=access_combined
| table _time _raw


-- Using the Fields Sidebar --

• Fields sidebar displays fields discovered in your events.
• Field Groupings:
  ✔ Selected Fields:
    ○ host, source, sourcetype by default.
    ○ Can be configured to add/remove fields.
    ○ Listed under every event.
  ✔ Interesting Fields:
    ○ Fields that appear in at least 20% of events.
    ○ Can make interesting field a selected field and vice versa.
  ✔ All Fields:
    ○ Use this to see all fields in events.
    ○ Will also include fields that appear in <20% of events.
  ✔ Field Characteristics:
    ○ # - Numeric fields.
    ○ a - Alphanumeric field.
    ○ Count of unique values.

• To make any field a selected field:
  ✔ Click on “All Fields”.
  ✔ Click the checkbox to the left of the field you want.
  ✔ Field will now show up in Selected Fields list.

• Click on a field name on the fields sidebar to open the fields window.
• The field window shows:
  ✔ Top 10 values of the field by count and percentage.
  ✔ Reports:
    ○ Top values – stats and visualization of top 20 values.
    ○ Top values by time – timechart of top values.
    ○ Rare values – stats and visualization of bottom 20 values.
    ○ Events with field – all events containing this field.
• If field is an interesting field, click “Yes” to make it a selected field.

• Run the query “index=web sourcetype=access_combined” for All time.
  ✔ Identify selected fields and confirm they show up under each event.
  ✔ Change JSESSIONID field from an interesting to a selected field.
  ✔ Revert JSESSIONID to an interesting field. Make it a selected field using the “All Fields” option.
  ✔ Identify numeric and alphanumeric fields on the fields sidebar.
  ✔ Check how many unique values are part of the JSESSIONID field.
  ✔ Click on the productid field to check top 10 values. Open each report associated with this field.
  ✔ Click on the numeric field status and confirm/verify the following 3 additional reports:
    ○ Average over time.
    ○ Maximum value over time.
    ○ Minimum value over time.

- Commands -

index=web sourcetype=access_combined| top limit=20 productId
index=web sourcetype=access_combined| rare limit=20 productId
index=web sourcetype=access_combined| timechart count by productId limit=10

index=web sourcetype=access_combined productId="*"
index=web sourcetype=access_combined productId="*"| timechart avg(status)

index=web sourcetype=access_combined| timechart max(status)
index=web sourcetype=access_combined| timechart min(status)


-- Using Fields in Searches --

Search syntax is: <field_name> = <field_value>

• Using fields to search is more efficient than using keywords and quoted strings.
• Use quotation marks for field names with spaces.
• Case Sensitivity:
  ✔ Field names are case sensitive
  ✔ Field values are NOT case sensitive
• You can use wildcards with fields.
• Splunk understands CIDR notation for IP addresses.
• You can use Boolean Operators: AND, OR, NOT with fields.
• You can use comparison operators: =, !=, >, <, >=, <=

- Using Wildcards -

• Wildcards match an unlimited number of characters in a field value.
• Wildcards can be used at the start, middle, or end of a value.

❌ Avoid wildcards at the beginning – this can hurt performance.
❌ Avoid wildcards in the middle – this may cause inconsistent results.

- CIDR Format for IP Fields -

• Specify network IP and subnet mask: userIPAddress="192.168.180.0/24"
• Splunk will search all events with IPs in the specified subnet.

Case Sensitivity Examples:

index=web action=addtocart         ✅
index=web ACTION=addtocart         ❌  (not the same)
index=web action=addtocart         ✅
index=web action=ADDTOCART         ✅  (value case-insensitive)

Wildcard & IP Examples:

index=web action=addtocart JSESSIONID=SD2*
index=web userIPAddress="192.168.104.0/24"
index=web userIPAddress="192.168.104.*

Combining Operators Example: index=main sourcetype="eventgen" (nodeName=host05 OR nodeName=host07) NOT partner=Telco04
Comparison Operator Example: index=web status=200 action=purchase

• Run the query “index=main sourcetype=eventgen partner=telco04” for last 60 mins.
  ✓ To verify case sensitivity, search with:
    o PARTNER=telco04 – Notice no results generated. Why?
    o partner=TELCO04 – Notice results generated. Why?
  ✓ Using a wildcard, find all caller Numbers starting with 710 and all response Codes starting with 4.
  ✓ Narrow the search down to all /24 IP addresses starting with 192.168.143 using:
    o Wildcard
    o CIDR notation


-- Boolean Operators --

• Supported Boolean Operators: AND, OR, NOT.
• AND operator is implied.
• Boolean operators are always in uppercase.
• Boolean operators help to:
  ✓ Narrow down searches specifically to what you want.
  ✓ Improves performance.

• Run the query “index=web sourcetype=access_combined” for last All time.
  ✓ Retrieve only events from Webserv1 and Webserv2.
  ✓ Exclude events that have action field value equal remove.
  ✓ Insert the AND operator in the query and verify results are the same.


-- Comparison Operators --

• Comparison or relational operators are used to link key/value pairs.
• We’ve already seen how to use “=“ operator with fields.
• Other comparison operators include:

Operator	Meaning
!=	      Not Equal
>	        Greater Than
<	        Less Than
>=	      Greater Than or Equal To
<=	      Less Than or Equal To

• Run the query index=web sourcetype=access_combined for last All time.
✔ Retrieve only events from Webserv1 and Webserv2.
✔ Events having number of bytes greater than or equal to 3000.
✔ Exclude events with action field value of remove.
✔ Events with status greater then 200 and less than 500.


-- Difference between != and NOT --

• Both operators can be used to exclude events from your search.
• In practice, they can produce different results. Example:
  ✔ NOT will search:
    ○ All events where action field exists, and value is different from remove.
    ○ All events where action field does not exist.
  ✔ != will only search
    ○ All events where action field exists, and value is different from remove.
  ✔ Will produce the same results if action field exists in all events.

• Run the query “index=web sourcetype=access_combined” for All time.
  ✔ Get the count of events where action field value is different from remove, using NOT Boolean operator.
  ✔ Get count of events where action field value is different from remove using != relational operator.
  ✔ Verify that the counts are different. Why?


-- Search Modes -- 

✓ Fast Mode:
  ○ Best performance, speed over completeness.
  ○ Field discovery disabled.
  ○ No event list when using transforming commands.

✓ Smart Mode (Default):
  ○ Balances speed and completeness.
  ○ Field discovery is enabled.
  ○ Behaves like Fast Mode when using transforming commands.

✓ Verbose Mode:
  ○ More data, least performance, completeness over speed.
  ○ Field discovery is enabled.
  ○ Shows event list when using transforming commands.

• Run the query "index=main sourcetype=eventgen" for last 24 hrs.
  ✓ Check fields sidebar for each mode to confirm field discovery is disabled in fast mode but enabled in smart and verbose mode.
  ✓ Inspect the search to confirm fast mode is the most performant and verbose least performant.
  ✓ Add the transforming command | stats count
    ○ Check that there’s no event list for fast and smart modes.


-- Search Best Practices --

• Specify indexes at the beginning of search string.
  ✓ Can search without indexes but it’s more efficient when you specify them.
    ○ Examples:
      - index=main
      - (index=web OR index=security)

• Avoid using wildcards the beginning or in the middle of your search string.
  ✓ Beginning of a string – *fail, *word
    ○ Search will look at EVERY string, i.e., scans all events.
    ○ Can cause performance issues.
  ✓ Middle of a string – p*word, http*buttercupgames.com
    ○ Might cause inconsistent results especially in strings containing punctuation.
  ✓ Use OR instead of wildcards when possible.
    ○ (process=su OR process=sudo) instead of process=su*

• It is better to use inclusion than exclusion.
  ✓ Inclusion: action=addtocart
  ✓ Exclusion: NOT action=addtocart

• Include as many search terms as possible to narrow down your results.
• Specify time to narrow down the results of your search. This is the most efficient filter.
• Use filters as early as possible in your search.
• Make your search terms as specific as possible.
  ✓ Search for "Jean Claude" instead of "Jean".

