 
-- Cryptology --

• Basic Concepts of Cryptology
• Types of Cryptography
• Historical Ciphers
• Objectives of Cryptography
• Random Number Generators
• Base64 Encoding/Decoding
• Hash Functions
• Digital Signatures
• SSL/TLS Protocol
• Cryptographic Attacks


-- Basic Concepts of Cryptology --

What is Cryptology
The science that designs crypto algorithms that provide data security in communication infrastructures and research the reliability of these algorithms is called "Cryptology". “Cryptology” is a science that is based on encryption and decryption, which is usually the expertise of mathematicians. For the science of cryptology, it can be said that consist of the intersection of mathematics, electrical engineering, and computer science. Cryptology science is a very broad science and is divided into 2 itself: "Cryptography" and "Cryptanalysis". 

What is Plaintext
"Plaintext" is a readable and understandable text or piece of text. In cryptology, plaintext means unencrypted data. 

What is Ciphertext
"Ciphertext" is the value produced as a result of the algorithm after the plaintext is given as an input to a crypto algorithm. In cryptology, ciphertext means encrypted data.

What is Cryptography
"Cryptography" is the whole of the techniques used to transform the transmitted information into a form that cannot be understood by unauthorized people. Cryptography includes mathematical methods that try to provide the basic objectives of information security such as confidentiality, integrity, authentication, and non-repudiation. 
"Cryptography" is the science that converts plaintext to ciphertext with the crypto algorithm. The algorithm in the encryption process is one of the main focuses. The method used by the encryption algorithm is one of the factors that determine the reliability of the algorithm. 

What is Cryptanalysis
"Cryptanalysis" is a branch of cryptology that examines the security of crypto algorithms in order to decrypt the encrypted data and tries to find their weaknesses. “Cryptanalysis” tries to detect mathematical vulnerabilities in the crypto algorithm in order to convert ciphertext to plaintext. 

What is Encryption
The process of converting plaintext into ciphertext is called "Encryption". There is an algorithm used mathematically in the encryption process. 

What is Decryption
The process of converting ciphertext into plaintext is called decryption. As in the encryption process, an algorithm is used in this process. 

What is the Key
The "Key" is a value given as input to encryption and decryption algorithms. Using this value, the encryption and decryption process is applied. 

What is Encoding/Decoding
"Encoding" is often confused with encryption as a concept. In fact, the two terms are used for very different purposes. Encoding is the process of converting data into a specific character set form. Unlike encryption algorithms, it is a conversion algorithm that is used without using key values ​​and without security concerns. There is also the opposite of the encoding process. For example, one of the most frequently used encoding algorithms is the "base64" algorithm. “Decoding” is the opposite of encoding algorithms. The encoded data with the decoding process will turn into previous data. 

- The Correct/Incorrect Uses of Concepts -

MD5/SHA1/SHA256 Encryption (-) Base32/Base64 Encryption/Decryption (-)
MD5/SHA1/SHA256 Decryption (-) Base32/Base64 Encode/Decode (+)
MD5/SHA1/SHA256 Hash Function (+) AES/RSA/ECC Encode/Decode (-)
MD5/SHA1/SHA256 Encode/Decode (-) AES/RSA/ECC Encryption/Decryption (+)


-- Types of Cryptography --

- Types of Cryptography -

• Symmetric Ciphers
• Asymmetric Ciphers
• Protocols

Symmetric Ciphers
Symmetric encryption algorithms are cryptographic algorithms that use the same key in encryption and decryption operations. For example, after you have encrypted the plaintext, you can decrypt the result obtained with the same key again. 

Asymmetric Ciphers
In this type of cryptosystem, which is introduced as "Public-key cryptography" or "asymmetric cryptography", two different keys are used instead of a single key. One of these keys is the "secret key" and the other is the "public key". Different keys are used in encryption and decryption processes for asymmetric crypto algorithms. While “public key” is used for encryption, “secret key” or in other words “private key” is used for decryption. 

Protocols
Cryptographic protocols deal with the implementation of cryptographic algorithms. Symmetric and asymmetric crypto algorithms are used in the security infrastructure of many software. An example of the protocols in which these algorithms are applied is the "Transport Layer Security (TLS)" protocol. In this type of cryptographic protocol, symmetric and asymmetric crypto algorithms are generally used together. This is called “Hybrid Schemes”.


-- Historical Ciphers --

The Substitution Cipher
The substitution cipher is an old and simple crypto algorithm. "Substitution Cipher" is an algorithm that works with the logic of replacing letters in the alphabet with another letter. 

Shift Cipher (or Caesar Cipher)
Caesar Cipher takes its name from the Roman leader "Julius Caesar". Julius Caesar developed a crypto algorithm to secretly transmit messages of military importance at that time, which was quite simple and changed each letter by scrolling over the alphabet. 
Shift Cipher is one of the substitution cipher types. Shift cipher is an algorithm that works by sequentially shifting letters in the alphabet. In this algorithm, the key is the value that indicates how many times the alphabet will be shifted. 
For example with the key "3", when 3 letters are shifted to the left for decryption

Caesar Cipher
https://en.wikipedia.org/wiki/Caesar_cipher

Online Caesar Encryption/Decryption Tool(CyberChef)
https://gchq.github.io/CyberChef/#recipe=ROT13(true,false,false,3)&input=Y2lwaGVy 


-- Objectives of Cryptography --

4 principles, which are among the principles of information security, are also valid for cryptography:

• Confidentiality
• Integrity
• Authentication
• Non-repudiation

Confidentiality
Data/information sent over communication devices should not be understood by unauthorized people. Malicious people should not be able to make sense of the data, even if they obtain information that should remain between the parties. When the attacker listens to the network traffic, encrypted data should appear and this data should be cryptographically undecryptable. If encrypted data is somehow decrypted, the crypto algorithm used will cease to be reliable. Therefore, the developers of the crypto algorithm should design strong crypto algorithms considering this situation. This is the "Confidentiality" principle in information security principles. While designing cryptographic algorithms, it is necessary to design a crypto algorithm in line with this principle. 

Integrity
The attacker can attack the MiTM (Man in the Middle) attack by entering between two communication devices and taking over the traffic in between. In this case, the data reached by the attacker can be changed by the attacker and sent to the target. Apart from preventing this attack, which is possible in theory and in practice, it is necessary to verify that the integrity of the sent data is intact on the other side. In this way, data transmission security is ensured by cryptography. The “Integrity” principle, one of the information security principles, tells us that in such a case we have to verify that the data is not cryptographically compromised. While designing algorithms in cryptography, algorithm design should be done by considering data integrity. 

Non-repudiation
Another principle to consider when creating cryptographic algorithms is the "Non-repudiation" principle. This principle is responsible for ensuring that the sender is not in a position to deny that he has sent the information. Evidence that the sending party is sending the information must be found in the communication algorithm itself. When these principle requirements are not included in the algorithm, it is not revealed that fake people act/do not act on their behalf instead of real people. For example, if there is an insider threat in an institution and the suspect denies that he has done malicious activity, the crypto algorithm should have the technical infrastructure to reveal the truth. Otherwise, it will be difficult to identify the person performing the operation. 

Authentication
The parties that will establish the communication must verify that each other is the right person. It is very difficult to be sure that the party receiving the message is the party the sender wants to communicate with. Therefore, cryptography needs to establish a validation mechanism to prevent the occurrence of fake parties that technically and mathematically replace these two parties. The authentication mechanism is one of the most basic security requirements and its use is very common. For example, when logging in to social media applications or the banking system, whether you are the right person is verified with your username and password information. In addition, more advanced security measures can be taken. For example, “Two-Factor Authentication(2FA)” is one of these security features. With 2FA, one more step of verification is done by using SMS or an authenticator application, and security is increased. It is the "Authentication" principle that provides this for Cryptography. 


-- Random Number Generators --

For a crypto algorithm to be strong in cryptography, it is important that the key is long enough and random. Many random number generator methods have emerged to make the key random. 

There are three types of Random Number Generators:

• True Random Number Generators (TRNG)
• Pseudorandom Number Generators (PRNG)
• Cryptographically Secure Pseudorandom Number Generators (CSPRNG)

True Random Number Generators (TRNG)
True Random Generator is a method that generates random numbers based on real physical operations. An example of this type of random number generation is a coin flip or a dice toss. Although it is an effective method in terms of randomness, it is not a preferred method in terms of applicability and speed. 

Coin Flipping: https://www.random.org/coins/ 

Pseudorandom Number Generators (PRNG)
The Pseudorandom Number Generator method needs an initial random value to ensure randomness. This value is called “seed”. This value can come from the TRNG method. It generates random numbers step by step according to some mathematical calculations over this first value. By applying the same mathematical calculation recursively, a number is generated at each step. Compared to the TRNG method, its application in practice is much easier and faster. But it is not secure and unpredictable enough for use in cryptography. Because if the first value is determined, it is not possible to talk about completely random values, since the value calculated in each step will be the same every time. For example, the "rand()" function in the C programming language can be given as an example of generating a number of types of PRNG. 

Cryptographically Secure Pseudorandom Number Generators (CSPRNG)
Cryptographically Secure Pseudorandom Number Generators (CSPRNG) is an unpredictable variant of PRNG. As in the PRNG method, it is not possible to predict and calculate the next value (0 or 1 bit) to be produced mathematically. The PRNG methods are frequently used in software testing, but CSPRNG is a cryptography-specific method. 

CSPRNG: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator 


- Generating Random Value via Linux Command Line  -

Random Number Generation with $RANDOM: sudo echo $RANDOM 

└─$ sudo echo $RANDOM                                                              
[sudo] password for kali: 
28090

In this method, random number generation is between “0-32767” values. 

Random Number Generation with /dev/random: od -An -N2 -i /dev/random | od -An -N3 -i /dev/random 

└─$ od -An -N2 -i /dev/random 
       17174

└─$ od -An -N3 -i /dev/random 
    13358860

└─$ od -An -N4 -i /dev/random 
  1000187406

CSPRNG Linux: https://medium.com/@phil_k/one-liner-csprng-in-your-friendly-linux-console-be02b3bc5a1f 


-- Base64 Encoding/Decoding --

What are Base32 and Base64
"Base32" and "Base64" is a method of representing binary data with a specific character set based on "ASCII".

ASCII (American Standard Code for Information Interchange): ASCII format is a table that emerged in the name of digital systems having a common numerical value between characters. In this way, the binary equivalent of a character is the same in all electronic systems.
Attackers use the "Base32" encoding method for data exfiltration with the DNS protocol. It often indicates an abnormal situation when SOC analysts see data transmitted in "Base32" format, especially in queries related to DNS requests. 

Example Base64 Encoded Data: YmFzZTY0X2VuY29kaW5n
Example Base32 Encoded Data: MJQXGZJTGJPWK3TDN5SGS3TH 

- Intended Uses and Features -

"Base32" and "Base64" is an encoding method that allows sending text-based data to systems that process binary data type. In this encoding method, all data can be kept without data loss. It is an effective method to avoid some characters that may cause problems in the target system. For example, it provides the ability to transmit data in audio or video format to the target system as text-based. It reduces the errors that may be encountered during transmission or during data processing in the target system. The numbers 32 and 64 at the end of their names indicate the total number of characters in the character set. For example, the character set in the base64 encoding method includes both lowercase and uppercase letters and numbers. The character set of the Base32 encoding method does not include lowercase letters and some numbers.
Base64 character set: 26 lowercase + 26 uppercase + 10 digits + “/” sign + “+” sign = 64 characters
Base32 character set: 26 uppercase letters + 6 digits = 32 characters

Note: Base64 and Base32 encoding is never an encryption or decryption algorithm. It is also not recommended to be used for security purposes. 

ASCII Table: https://www.asciitable.com/ 

- Base64 Encoding Logic -

Step 1
First, the data to be given to the base64 encoding algorithm is selected. A text has been chosen for clarity: “base64” 

Step 2
Since bit-based operations will be done, "base64" text is converted to binary:
Binary: 01100010 01100001 01110011 01100101 00110110 00110100
The following address can be used for this process:
Online Converter: https://www.asciitohex.com/ 

Step 3
Data converted to binary format is divided into 6-bits

Step 4
Each bit sequence separated as 6-bit is found in the base64 encoding table, and the characters are ordered 

As a result of the above sequential operations, the encoded data was successfully created. The decoded data, that is, the "base64" value, in which the operations performed are applied exactly the opposite, is reached.

Note: In the Base64 encoding method, the “padding” character is “=” sign. If the length of the input entering the base64 encoding process is not “3 bytes and its multiples”, “=” sign(s) are added to the output as padding bytes. 

- Base64 Encode/Decode Operations on Linux Command Line -

└─$ echo "base64" | base64 
YmFzZTY0Cg==

└─$ echo "YmFzZTY0Cg==" | base64 -d
base64

Base64: https://en.wikipedia.org/wiki/Base64 


-- Hash Functions --

What are Hash and Hash Functions
Hash functions are a special type of function that performs certain operations mathematically and in computer science, which operates on bits. Hash functions are not encryption/decryption algorithms. Therefore, the hash function does not need a key to perform operations. Hash functions are functions that work fast and have easy calculation features. In this way, it can work in a short time even on large files. The hash function takes an input and produces an output as a result of the calculations in the algorithm. This output is called "Hash". The length of the input can be variable while the length of the output is fixed length. One of the important features of hash functions is that they produce a different hash for each different input. For example, the hash of the bit string "00110101" and the hash of the bit string "00110100" are different. The difference of even a single bit affects the result produced by the hash function, that is, it makes the value of the hash different. The reliability of the hash function depends on producing different hashes for different inputs. For example, if two different inputs cause the same hash the hash function loses its reliability. The situation where two different inputs produce the same hash is called "collision". 

What are the Purposes of using it
There are many ways of using Hash functions. Hash functions pass very large inputs or files through bit-based operations, resulting in a short and unique hash as a result of the algorithm. The hash produced as a result of the hash function can be used as the digital identity of the data.
Another purpose of using hash functions is integrity check. If a problem has occurred in the transmission of the data or file and there has been a change in the bits of the file/data, hashes are used to understand this. Sometimes attackers can specifically replace real files with fake ones. In this case, it should be verified whether the file is the original file or not. One way to find out that the file is intact is to use hash functions. 

$ sha256sum linuxmint-20.3-cinnamon-64bit.iso
e739317677c2261ae746eee5f1f0662aa319ad0eff260d4eb7055d7c79d10952 linuxmint-20.3-cinnamon-64bit.iso

The Role of Hash Functions in Cyber ​​Security
Hash functions are very important in terms of cyber security. On Linux and Windows systems, users' password information is not kept as cleartext on the system. That would be a very insecure method. Passwords are kept in the form of hashes on the systems. Hash functions are different from other crypto algorithms. One of these differences, perhaps one of the most important, is that hash functions are unidirectional. 

Using online services
https://www.miraclesalad.com/webtools/md5.php

Linux: echo -n LetsDefend | md5

List of Hash Functions: https://en.wikipedia.org/wiki/List_of_hash_functions 

root@ip-172-31-12-68:~/Desktop/QuestionFiles/HashFunctions/Question3# md5sum 1.jpg 
253dd04e87492e4fc3471de5e776bc3d  1.jpg
root@ip-172-31-12-68:~/Desktop/QuestionFiles/HashFunctions/Question3# md5sum 2.jpg 
253dd04e87492e4fc3471de5e776bc3d  2.jpg
root@ip-172-31-12-68:~/Desktop/QuestionFiles/HashFunctions/Question3# 
root@ip-172-31-12-68:~/Desktop/QuestionFiles/HashFunctions/Question3# md5sum 1.jpg 2.jpg | awk '{print $1}' | uniq -c | wc -l
1
root@ip-172-31-12-68:~/Desktop/QuestionFiles/HashFunctions/Question3#

If the output is 1, the hashes are identical.
If the output is 2, the hashes are different.


-- Digital Signatures --

What is a Digital Signature
A digital signature is a cryptographic feature that allows verifying who sent and signed data in the digital environment. It is cryptographically based on mathematics and computer science. The requirements of the "Non-repudiation" principle included in the previous topics in the training are fulfilled with a digital signature. A digital signature is a feature used in security events in IT infrastructures. At the same time, an integrity check can be done with a digital signature. The digital equivalent of wet signatures on documents in daily life can be called digital signature. Although there are physical and logical differences between them, both serve similar purposes. 
In the Windows operating system, files with the extension "exe" have a digital signature. Thanks to this signature, it is possible to see which company or who signed the file and verify it.

Cryptographic Fundamentals of Digital Signatures
Digital signatures work cryptographically similar to other crypto algorithms. Algorithms used in digital signatures should be asymmetric crypto algorithms. This is because the same key is used for encryption/decryption in symmetric crypto algorithms. In digital signing algorithms, 2 different keys are used for signing and signature verification: “public key” and “private key”. A private key is a personal key used in signing. The reason why this key is used in the signing process and kept secret is that it can be signed on behalf of the owner of the key. The public key, on the other hand, is used to verify signatures that are shared publicly and signed with a private key.


-- SSL/TLS Protocol --

What is SSL/TLS Protocol
The SSL/TLS protocol is a protocol designed for secure two-party communication in computer networks. Generally, the use of the HTTPS protocol in web applications is widely known. However, SSL/TLS protocol is a protocol that is frequently used in e-mail, instant messaging, and VoIP applications. It ensures that the communication between the parties remains confidential. The SSL/TLS protocol has 3 main purposes:

• Encryption: It allows to hide data from parties other than the 2 communicating parties.
• Authentication: It allows to verify that both parties that want to provide secure communication are the correct parties.
• Integrity: It ensures that the outgoing data has not been changed between the 2 parties with which secure communication is provided.

The basis of the SSL/TLS protocol is cryptographically strong crypto algorithms.
"SSL (Secure Sockets Layer)" is the name of the first version of the protocol to provide secure communication. Later, the name of the protocol was changed to "TLS (Transport Layer Security)". As can be seen from the table above, it is noticed that there is a name change before/after a certain date. The recommended version for using the SSL/TLS protocol is "TLS 1.3"
Detailed information about SSL/TLS can be seen by clicking the padlock icon. The SSL/TLS certificate information of the server is located in this section.

The SSL/TLS protocol uses certificates. Certificates are important to ensure secure communication. It is actually SSL/TLS certificates that enable encrypted traffic to occur by using HTTPS instead of HTTP on the browser. SSL/TLS certificate is a data file on the server. The client uses the server's certificate to verify the identity of the server and to get the public key from the server to be used in communication with the server. The browser uses its own list of certificate authorities to verify certificates. If the certificate of the connected server does not belong to a trusted certificate authority, the browser considers it insecure and warns the user.

- How does SSL/TLS Principle work -

Before starting encrypted and confidential data transfer with SSL/TLS protocol, the two parties that will communicate must follow the steps of some transactions. Communication consisting of all these steps is called “SSL/TLS Handshake”. These steps are as follows:

• The user sends a request to the server.
• The server sends its public key to the user along with its own SSL/TLS certificate.
• The user's browser checks and verifies whether the sent certificate is valid.
• The user's browser generates a randomly generated symmetric key and encrypts this symmetric key with the public key sent by the server and sends it to the server.
• The server decrypts the encrypted symmetric key with the private key and the symmetric key is sent to the server in a secure manner.
• From this stage onwards, the server encrypts every data to be sent to the user's browser using this symmetric key.
• Since the user has this symmetric key, he decrypts the incoming encrypted data with the symmetric key and displays the page securely.


-- Cryptographic Attacks --

Cryptographic attacks require mastery of technical details that make them difficult to understand, depending on the crypto algorithm. Cryptographic attacks against each crypto algorithm differ. 

Cryptanalysis and Attack Types
Cryptanalysis is a branch of science that falls under cryptology. Those interested in this branch of science test the reliability of crypto algorithms designed by cryptography experts. The test here is very different from a routine test. By discovering attack methods specific to the Crypto algorithm, the weakness in the algorithm is exploited and the reliability of the crypto algorithm is tested in this way. Cryptanalysis is basically examined under 3 headings:

• Classical Cryptanalysis
• Implementation Attacks
• Social Engineering

- Classical Cryptanalysis -

Classical cryptanalysis tries to obtain the plaintext from the ciphertext or to obtain the key from the ciphertext. With this method, simple methods are usually used when finding the weakness of the crypto algorithm. Structural weaknesses of the Crypto algorithm can be used or all possibilities can be tried with brute-force techniques. Generally, computers that require high processing power do not need to be used for this attack type. Attacks against Historic Ciphers are in this group. 

- Brute-Force Attacks -

In Brute-Force attacks, the attacker tries to determine the correct key value by trying all possible key possibilities on encrypted data he has captured. By checking whether the data obtained as a result of each key attempt is meaningful, he can understand whether he has obtained the key. Although there are many different criteria in this type of attack, the key length and the processing power of the attacker are important. If the length of the key is not long enough and the attacker has the processing power to do this attack, it may be possible to obtain the key in a short time. In order to prevent such attacks cryptographically, the length of the key value of the crypto algorithm should be such that it cannot be found by brute-force techniques. The crypto algorithm, which is developed assuming that the attacker has high processing power, can make it a more reliable crypto algorithm. 

- Letter Frequency Analysis -

If we had used the brute-force attack in the previous title on the Caesar cipher, the probability number of key values ​​would be 26, that is, it would be as many as the number of letters in the alphabet. If an encryption method is used as a substitution cipher instead of a Caesar cipher in the form of a different letter for each letter, an attack method that is more effective than a brute-force attack can be used: “Letter Frequency Analysis”. This analytical method makes it possible to obtain the plaintext using the weaknesses of the crypto algorithm. In the substitution cipher, each letter corresponds to a fixed letter. This reveals an analytical weakness. For example, one of the most used letters in English is statistically the letter "E" (about 13%). The second most used letter is the letter "T" (about 9%). If a letter analysis is made in the encrypted text, which is in the hands of the attacker, it can be easily seen how much each letter is. The letter corresponding to the letter "E" will be the letter with the highest number in the text. For example, let's examine the following plaintext and ciphertext:
Plaintext: Having a certification is one of the popular factors that affect the recruitment process. Human resources specialists or the hiring managers who are authorized in the recruitment process consider the certificates of the candidates. Having a certificate or multiple certificates will be advantageous in order to stand out among other applicants. In some cases, having a certificate(s) may be mandatory depending on the requirements posted on the open position.
Ciphertext: Kdylqj d fhuwlilfdwh lv rqh ri wkh srsxodu idfwruv wkdw diihfw wkh uhfuxlwphqw surfhvv. Kxpdq uhvrxufhv vshfldolvwv ru wkh klulqj pdqdjhuv zkr duh dxwkrulchg lq wkh uhfuxlwphqw surfhvv frqvlghu wkh fhuwlilfdwhv ri wkh fdqglgdwhv. Kdylqj d fhuwlilfdwh ru pxowlsoh fhuwlilfdwhv zloo eh dgydqwdjhrxv lq rughu wr vwdqg rxw dprqj rwkhu dssolfdqwv. Lq vrph fdvhv kdylqj fhuwlilfdwh(v) pdb eh pdqgdwrub ghshqglqj rq wkh uhtxluhphqwv srvwhg rq wkh rshq srvlwlrq. 

CharacterCounter: https://github.com/smh67dmrc/CharacterCounter 

- Implementation Attacks -

Implementation attacks are an advanced type of attack that requires technical knowledge to implement. For example, obtaining the secret key according to the measurement of the electrical power consumption of the processor using the secret key is such an attack. In such an attack, it may be possible to obtain the secret key with signal processing techniques by following the power. In other words, such attacks are called "Side Channel Attacks".

- Social Engineering -

Social Engineering is the general name of a type of attack that is caused by the vulnerability of the person himself. Apart from Cryptology, this topic is very common and has many creative techniques. It is mostly used in terms of cryptology, which is mentioned under this title. For example, "social engineering" methods can be used to obtain the secret key necessary to obtain an encrypted text. Bribery, blackmail, and classical espionage methods can be given as examples. Using force to learn the secret key is also included in these methods. One of the frequently used methods is to persuade the person over the phone. Around a scenario, the attacker can achieve the goal based on a logical reason. For example, an attacker who says he is from the IT department may ask the person for their secret key or direct password for software updates. In order for the attacker to be successful in this attack, it is usually sufficient to convince the other party. Although it is a non-technical method and a simple method, many people can be persuaded by this type of talk. It is one of the methods that still remains popular today. In order to be protected from such an attack, people should be invested and the awareness of the employees should be increased.  










































