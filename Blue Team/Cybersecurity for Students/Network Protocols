
If you want to investigate suspicious network activities, you need to know how network protocols work and what evidence you can extract. Learn how it works and how you can use it as an analyst.

• Transmission Control Protocol (TCP)
• User Datagram Protocol (UDP)
• Domain Name System (DNS)
• Telnet
• File Transfer Protocol (FTP)
• Secure Shell Protocol (SSH)
• Hypertext Transfer Protocol (HTTP)
• Dynamic Host Configuration Protocol (DHCP)


-- Transmission Control Protocol (TCP) --

Transmission Control Protocol (TCP) is a network protocol that provides reliable and steady data transmission between applications. According to the OSI model, it is located in the 4th layer.

• Ensures the data transmission between the two applications.
• Allows multiple connections.
• There is no data transfer before the connection is established.
• Priority and security definitions can be made for the data sent.
• Makes an error control.
• Provides flow control.

Establishing the TCP Connection (Three-way Handshake)
TCP connection must be established in order to transfer data through the TCP protocol. The establishment of the TCP connection indicates that the sender and the recipient are both ready for the data transfer.

The TCP connection established before the data transfer is called “Three-Way Handshake“. 

Three-Way Handshake consists of the following steps:
• The sender party who wants to establish the TCP connection sends the TCP segment set to the “SYN” flag to the recipient side.
• After receiving this segment, the recipient party transmits a TCP segment set to the “SYN” and “ACK” flags to the sender.
• As a final stage, the sender part of this segment sends the TCP segment set to the “ACK” flag back to the recipient and the connection is established.

TCP Data Flow and Transmission Reliability
Transmission reliability is further supported by mechanisms like the three-way handshake and systematic confirmation of each segment. In case of errors or lost segments, the protocol resends the affected data until successful delivery is achieved, ensuring robust and dependable communication.


Terminating TCP Connections

Terminating TCP connections takes place in 4 steps:
• The party that wants to terminate the TCP connection sends the TCP segment with the “FIN” flag set to the target device.
• After receiving the TCP segment, the target device sees that the "FIN" flag is set and sends the TCP segment with the "ACK" flag set in response.
• The target device sends the TCP segment with the “FIN” flag set to the device that wants to terminate the connection.
• As the last step, the device that wants to terminate the connection sends the TCP segment with the "ACK" flag set in response to the incoming TCP segment and the TCP connection is terminated.

Note: FIN and ACK flags are 1-bit fields in the TCP protocol header. TCP connections can also be terminated with the “RST” flag. TCP connection terminated using the RST flag is an immediate and one-sided connection termination. In other words, the “RST” flag is used to reset the connection.


TCP Connections
TCP connections are frequently used by applications that transmit TCP-based transmission on the device. Some information about the protocol is used so that applications can connect with the TCP protocol. Each TCP connection consists of “Source IP Address-Source Port Number”, “Destination IP Address-Destination Port Number” information.

What is Port?
Ports are the communication points that applications use to communicate with each other. Many services can exist on a server at the same time. Port numbers make the incoming requests clear and tell us which services they belong to. The port is essentially a number which can take a value between “0-65535”. Some port numbers are used by some protocols by default. 

• IP Address
• Port Number

Default TCP Ports
• FTP : 21
• SSH : 22
• Telnet : 23
• SMTP : 25
• DNS : 53
• HTTP : 80
• POP3 : 110
• SMB : 445

TCP Protocol Header
There are many protocol-specific data fields in the header of the TCP protocol. These data fields contain all the information required by the TCP protocol.

Source Port Number
“Source Port Number ” is the field that the port number of the sender is included. It is “16 bits” long.

Destination Port Number
“Destination Port Number ” is the field that the port number of the recipient is included. It is “16 bits” long.

Sequence Number
“Sequence Number” field is the number used to track the transmissions of TCP segments. If the "SYN" flag is set in the TCP segment, this number is the "Initial Sequence Number" value. It is "32 bits" long.

Acknowledgement Number
“Acknowledgement Number ” field is a value that indicates up to which byte the transmission of the sent segments is made. It is "32 bits" long.

Header Length (HLEN)
“Header Length” is the field that holds the value of the TCP header length. It is “4 bits” long.

Reserved
It is the field reserved for future use. It is “3 bits” long.

Control Flags

“Control Flags” is the field where the values ​​of the flags are kept. Each flag is "1 bit" long. Setting a flag means that it takes the value "1" in binary. In total, this field is “9 bits” long.

• SYN: It is the flag used to initiate TCP connections.
• ACK: It is the confirmation flag that indicates that the packets are transmitted. It also indicates to confirm the connection setup.
• FIN: It is the flag used to terminate the TCP connection in a controlled manner.
• RST: It is the flag used to terminate the TCP connection unilaterally and abruptly. It is used to reset the connection.
• PSH: It is the flag set in the packets where the data is sent to the target application.
• URG: It is the flag used to notify that there is urgent and priority data.

Window Size
“Window Size” field is where the maximum data size of the recipient’s buffer capacity is defined. It is “16 bits” long.

Checksum
“Checksum” is the field that controls whether the integrity of the TCP segment is intact during the transmission. It has hexadecimal value and it is “16 bits” long.

Urgent Pointer
The “Urgent Pointer” field is a value that indicates up to which data the urgent bytes are. It indicates up to which data the urgent bytes are. In order to use this field, the "URG" flag must be set. It is “16 bits” long.

Options
“Options” is the field created to use various TCP protocol additional features. There is no obligation to use. It has no fixed length.


Establishing a TCP Connection with Netcat

sudo nc 192.168.216.128 5555


-- User Datagram Protocol (UDP) --

What is User Datagram Protocol (UDP)
User Datagram Protocol (UDP) is another network protocol that provides data transmission between applications. It is located in the 4th layer of the OSI model. Unlike the TCP protocol, the UDP protocol does not provide transmission reliability.

Features of the UDP Protocol

• It does not require connection setup before transmission.
• It provides a fast transmission.
• It does not guarantee that the data will be transmitted.
• It contains less information in the header structure.
• It is often used by video applications and real-time applications.
• It doesn't do error checking.
• It doesn't handle flow control.

UDP Connections
UDP connections are frequently used by applications that transmit data via UDP. In order for applications to connect with the UDP protocol, some information about the protocol is used. Each UDP connection consists of “Source IP Address-Source Port Number”, “Destination IP Address-Destination Port Number” information.

Default UDP Ports
• DNS : 53
• DHCP : 67,68
• SNMP : 161,162

UDP Protocol Header

Source Port Number
It is the field that contains the port number of the sender. It is “16 bits” long.

Destination Port Number
It is the field that contains the port number of the recipient. It is “16 bits” long.

Length
It is the field that contains the total length of the header and data of the UDP segment. It is “16 bits” long.

Checksum
The “Checksum” field contains the hexadecimal value that allows checking whether the integrity of the UDP segment is intact during transmission. Unlike the TCP protocol, this field is not required. It is “16 bits” long.



-- Domain Name System (DNS) --

What is DNS Protocol
In the early times of the internet the hostnames were located in the “Hosts” files in the central servers. The IP address of a computer with a known hostname used to be found through this file.
Today, the hosts file is still included in computers and can be used. The DNS protocol finds the IP address of the hostname we need to connect to.

What is Domain and Subdomain
"Domain" is an address used to access websites on the internet that has certain hierarchical structures.
"Subdomain" are the sub-sites under the main domain. Hierarchically subdomain is located on the left side of the main domain address it is separated form it with a "." (dot). For example https://app.letsdefend.io

https://app.letsdefend.io/

Protocol --> https
Subdomain --> app
Domain and domain suffix --> letsdefend.io


Top-Level Domains
Top-Level Domain (TLD) is the extensions added to the domain names. They are separated and determined in accordance with certain purposes to the right of the internet addresses.

Top-Level Domains Examples 

• .com - Commercial (e.g., businesses, general websites)
• .org - Organization (e.g., non-profits, NGOs)
• .net - Network (e.g., internet service providers, network infrastructure)
• .edu - Education (e.g., accredited educational institutions)
• .gov - Government (e.g., U.S. government agencies)
• .mil - Military (e.g., U.S. military entities)
• .info - Information (e.g., informational websites)
• .biz - Business (e.g., small businesses, commercial use)
• .io - Indian Ocean (commonly used for tech startups and developers)
• .co - Company (e.g., businesses, alternative to .com)

https://en.wikipedia.org/wiki/Top-level_domain
https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains

Features of the DNS Protocol

• The DNS protocol is located in the 7th layer (Application Layer) according to the OSI model.
• It uses the UDP protocol in the transport layer.
• DNS consists of a hierarchical structure.
• DNS has a mechanism that works using distributed databases.
• Each organization has its own DNS servers to enable devices to communicate with each other within its own computer network.
• DNS Server usually uses the UDP 53 port.

DNS Protocol Working Logic
When we want to connect to a website a number of highly systematic transactions occur within seconds. These are the DNS protocol and DNS servers related transactions. 
The DNS protocol uses DNS servers to perform its tasks. DNS Server keeps the Hostname-IP address information of websites and responds to the DNS queries for this information. 
In this way, the IP address of the website in the query is transmitted to provide network communication. 
When the DNS protocol cannot perform the task, the communication of the devices with each other is interrupted, and therefore, the DNS protocol is of great importance for communication.

1. The computer sends the DNS query to the DNS Server, which is registered on itself. If it has been accessed to “Letsdefend.io” previously, the IP address of this website may already be found in the DNS server. If so, IP address information is obtained from the DNS Server.
2. If “Letsdefend.io” was not accessed before, DNS Server cannot find the IP address information and contacts the “Root DNS Server” in order to detect the authorized DNS Server of “Letsdefend.io”.
3. The “Root DNS Server'' tries to determine the “Primary DNS Server” which belongs to "Letsdefend.io" from the database. After the “Primary DNS Server” IP address is determined, it is transmitted to the previous DNS server.
4. The DNS Server, which is registered on the computer, obtains the “Primary DNS Server” address, which belongs to "Letsdefend.io", then sends a DNS query to detect the IP address of the "Letsdefend.io" domain.
5. The DNS query reaches to the “Primary DNS Server” which belongs to “Letsdefend.io" and this DNS query is replied.
6. The DNS Server, which is registered on the computer, sends the IP address of "Letsdefend.io" to the querying system t


Types of DNS Records

• A (Address Record) - Maps a domain name to an IPv4 address.
• AAAA (IPv6 Address Record) - Maps a domain name to an IPv6 address.
• CNAME (Canonical Name Record) - Alias of one domain to another (e.g., www.example.com → example.com).
• MX (Mail Exchange Record) - Specifies mail servers for email routing.
• TXT (Text Record) - Stores text data, often used for verification (e.g., SPF, DKIM).
• NS (Name Server Record) - Specifies the authoritative name servers for a domain.
• PTR (Pointer Record) - Maps an IP address to a domain name (reverse DNS lookup).
• SRV (Service Record) - Defines the location (hostname and port) of specific services.
• SOA (Start of Authority Record) - Provides metadata about the domain (e.g., primary DNS server, admin email).
• CAA (Certification Authority Authorization) - Specifies which certificate authorities are allowed to issue SSL certificates for a domain

https://en.wikipedia.org/wiki/List_of_DNS_record_types


-- Hosts File --

The hosts file is a registry file included with Windows and Linux. It is possible to use the hosts file, which was used before the DNS protocol was developed, in today's current operating systems as well. In DNS queries made over the system, the contents of the hosts file is checked first.  If a record related to the address in the query is in the hosts file, it means that this record is valid.

Note: The location of the hosts file in Windows is: cmd
"C:\Windows\System32\drivers\etc\hosts", in Linux it is "/etc/hosts".


C:\Users\mirko>type "C:\Windows\System32\drivers\etc\hosts"
# Copyright (c) 1993-2009 Microsoft Corp.
#
# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.
#
# This file contains the mappings of IP addresses to host names. Each
# entry should be kept on an individual line. The IP address should
# be placed in the first column followed by the corresponding host name.
# The IP address and the host name should be separated by at least one
# space.
#
# Additionally, comments (such as these) may be inserted on individual
# lines or following the machine name denoted by a '#' symbol.
#
# For example:
#
#      102.54.94.97     rhino.acme.com          # source server
#       38.25.63.10     x.acme.com              # x client host

# localhost name resolution is handled within DNS itself.
#       127.0.0.1       localhost
#       ::1             localhost

C:\Users\mirko>

Note: Lines starting with the "#" sign in the hosts file are comment lines.


-- DNS Query with Dig -- 

The Dig tool allows to make DNS queries which works from the command line on Linux. 

# Basic Query  
dig example.com  

# Query Specific Record Type  
dig example.com <record-type>  

# Check Authoritative Name Servers  
dig NS example.com  

# Reverse DNS Lookup  
dig -x <IP-address>  

# Query a Specific DNS Server  
dig @<DNS-server> example.com  

# Show Only Answer Section  
dig +short example.com  

# Query with Trace  
dig +trace example.com  

# Test DNSSEC Records  
dig +dnssec example.com  

# Specify Port  
dig -p <port-number> example.com  

# Use TCP Instead of UDP  
dig +tcp example.com  

# Force IPv6 Query  
dig -6 example.com  

# Force IPv4 Query  
dig -4 example.com  

# Print Results in JSON Format  
dig +json example.com  

# Set Query Timeout  
dig +time=<seconds> example.com  

# Disable Additional Records  
dig +noadditional example.com  

# Show All Details  
dig +noall +answer example.com  

# Print TTL of Records  
dig +ttlunits example.com  

Dig Online: https://www.digwebinterface.com/


-- DNS Query with Nslookup --

# Basic Query  
nslookup example.com  

# Query a Specific DNS Server  
nslookup example.com <DNS-server>  

# Find MX Records  
nslookup -query=mx example.com  

# Find NS Records  
nslookup -query=ns example.com  

# Find A Records  
nslookup -query=a example.com  

# Find AAAA Records  
nslookup -query=aaaa example.com  

# Find CNAME Records  
nslookup -query=cname example.com  

# Reverse DNS Lookup  
nslookup <IP-address>  

# Set Timeout  
nslookup -timeout=<seconds>  

# Use a Specific Port  
nslookup -port=<port-number> example.com  

# Enable Debugging Mode  
nslookup -debug example.com  

# Set Query Type  
nslookup -type=<record-type> example.com  


-- Telnet --

Telnet is the protocol that helps accessing devices via the command line.

Features of the Telnet Protocol

• It is located in the 7th layer (Application Layer) within the OSI model.
• It uses the TCP protocol at the transport layer.
• Telnet protocol usually uses TCP port 23.
• It is mostly used for management purposes.
• It is not preferred because it transmits the data traffic in an unencrypted way.

Making a Telnet Connection on Windows
"Telnet client" is not installed on Windows by default so it must be installed and activated in the system to be able to make connections with telnet protocol.

• Control
• Programs and Features
• Tunr Windows featires on or off
• Telnet Client


To be able to establish telnet connection, we should type a command such as "telnet 192.168.5.100" from the command line. The IP address in the command is the IP address of the target device to be connected.


telnet <hostname or IP> <port>

telnet 192.168.1.1 22
telnet mail.example.com 25

HELO example.com
MAIL FROM:<you@example.com>
RCPT TO:<recipient@example.com>
DATA
Hello, this is a test.
.
QUIT

GET / HTTP/1.1
Host: example.com


-- File Transfer Protocol (FTP) --

What is FTP Protocol
File Transfer Protocol (FTP) is a network protocol that provides file transfer between devices.

- Features of FTP Protocol -

• According to the OSI model, the FTP protocol is located in the 7th Layer (Application Layer).
• It uses the TCP protocol at the transport layer.
• It has a Client-Server architecture.
• Different operating systems can use it.
• For file transfer with FTP protocol, a connection must be established first.
• While establishing the FTP connection, the authentication process that provides basic security is performed using a username and password.
• FTP does not encrypt its traffic; all transmissions are in clear text, and usernames, passwords, commands, and data can be read by anyone able to perform packet capture (sniffing) on ​​the network. (Source: Wikipedia)
• Provides data representation diversity (like ASCII and EBCDIC).

- FTP Commands -

USER Command
The USER command is the command that determines which user to connect to the FTP Server.

PASS Command
The PASS command is the command that gives the password of the user provided with the USER command for the connection to the FTP Server.

HELP Command
It is the command that provides information about the usage of commands. If used without parameters, a list of commands is displayed.

PWD Command
The PWD command is the command that shows which directory it is working on.

RETR Command
The RETR command is the command used to initiate the file transfer process.

STOR Command
It is the command used to transfer the specified file to the server.

LIST Command
It is the command that lists the names and properties of the directory and files under the current directory.

QUIT Command
It is the command that terminates the FTP connection.

https://en.wikipedia.org/wiki/List_of_FTP_commands


- FTP Server Return Codes -

FTP servers transmit 3-digit return codes in response to commands from FTP clients.

220 (vsFTPd 3.0.3) 
AUTH TLS
530 Please login with USER and PASS. 
AUTH SSL
530 Please login with USER and PASS.

https://en.wikipedia.org/wiki/List_of_FTP_server_return_codes


- File Transfer with FTP -

Since FTP protocol has client-server architecture, FTP server must be installed on the device that will send the file. Similarly, the FTP client application must be installed on the device that will receive the file. 

https://phoenixnap.com/kb/install-ftp-server-on-ubuntu-vsftpd 
https://filezilla-project.org/download.php?type=client 
https://windows.tutorials24x7.com/blog/how-to-install-filezilla-ftp-client-on-windows-10 


- FTP and Wireshark -

ftp.request.command == "STOR" || ftp.request.command == "CWD"

Request: CWD /home/blueteam/uploads
Response: 250 Directory successfully changed.

Request: STOR upload.txt
Response: 150 Opening data connection.















-- Secure Shell Protocol (SSH) --



-- Hypertext Transfer Protocol (HTTP) --



-- Dynamic Host Configuration Protocol (DHCP) --






































