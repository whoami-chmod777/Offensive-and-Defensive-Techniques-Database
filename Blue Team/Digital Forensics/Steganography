
"The practice of concealing messages or information within other non-secret text or data." An example of this would be having a text file that contains secret information, which is hidden inside an innocent image file. If this image file was sent as an email attachment, the recipient would receive a normal image file. However, using the right tools, you can recover the hidden file. 


apt-get install steghide

Step 1: Embed Hidden Data into a File

steghide embed -ef secretFile -cf coverFile -sf outputFile -z compressionLevel -e scheme
steghide embed -ef secret.txt -cf StegoCat.jpg -e none -Z

The arguments are broken down as follows:

-ef specifies the path of the file that you want to hide. You can embed any kind of file inside of the cover file, including Python scripts or shell files.
-cf is the file that the data is embedded into. This is restricted to BMP, JPEG, WAV, and AU files.
-sf is an optional argument that specifies the output file. If this is omitted, the original cover file will be overwritten by your new steganographic file.
-z specifies the compression level, between 1 and 9. If you prefer not to compress your file, use the argument -Z instead.
-e specifies the type of encryption. Steghide supports a multitude of encryption schemes, and if this argument is omitted by default, Steghide will use 128-bit AES encryption. If you prefer not use encryption, simply type -e none.


Step 2: Extract Hidden Data from the File

steghide extract -sf stegoFile -xf outputFile
steghide extract -sf StegoCat.jpg -xf extractSecret.txt

