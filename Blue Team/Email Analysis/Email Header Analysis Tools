
A brief overview and example for each tool:


1. eioc.py: Extracts Indicators of Compromise (IOCs) from various file formats.

Example: python eioc.py sample.pdf

python eioc.py sample.pdf # Extracts IOCs from a PDF file.
python eioc.py malware.exe # Extracts IOCs from an executable file.
python eioc.py archive.zip # Extracts IOCs from an archive.
python eioc.py network.pcap # Extracts IOCs from a network capture file.


2. emldump.py: Analyzes and extracts attachments, headers, and other details from .eml email files.

Example: python emldump.py email.eml

python emldump.py email.eml # Displays details of an .eml email file.
python emldump.py -a email.eml # Extracts all attachments from the email.
python emldump.py -d email.eml # Decodes and shows base64-encoded parts of the email.
python emldump.py -H email.eml # Shows full email headers for detailed analysis.


3. oledump.py: Analyzes OLE (Object Linking and Embedding) files to detect malicious embedded objects in MS Office files.

Example: python oledump.py document.doc

python oledump.py --help document.doc # Show help and list available options.

python oledump.py document.doc # Lists OLE streams in a .doc or .xlsm file.

python oledump.py -s 4 document.doc # Extract and display the content of a specific stream.
python oledump.py -s 4 -S document.doc # Show the structure of a stream as a hex dump.
python oledump.py -s 4 --raw document.doc # View raw content of the selected stream to manually inspect data.
python oledump.py -s 4 --plugin_http document.doc # Extract all URLs from the OLE file.
python oledump.py -s 4 --vbadecompresscorrupt document.doc # Decompress and analyze corrupted VBA macros.

python oledump.py -a document.doc # Displays all OLE objects with automatic analysis.
python oledump.py -i document.doc # Show metadata, including authorship and modification timestamps.
python oledump.py -t document.doc # Show all streams with indicators for macro content.

python oledump.py -p plugin document.doc # Uses a specific plugin to analyze the file.

- Using grep -

python oledump.py -s 4 document.doc | grep -i "http"
python oledump.py -s 4 document.doc | grep -i ".exe"
python oledump.py -s 4 --vbadecompresscorrupt document.doc | grep -i "http"
python oledump.py -s 4 --strings document.doc | grep -i "url"


4. pdfid.py: Scans PDFs for signs of malicious content (e.g., suspicious keywords or obfuscation).

Example: python pdfid.py document.pdf

python pdfid.py document.pdf # Scans for potential malicious content in the PDF.
python pdfid.py -a document.pdf # Shows all detected objects and suspicious content.
python pdfid.py -e document.pdf # Extracts and examines embedded files in the PDF.
python pdfid.py -s document.pdf # Analyzes a stream from the PDF for further inspection.


5. pdf-parser.py: Parses and extracts contents (streams, objects, etc.) from PDF files for detailed analysis.

Example: python pdf-parser.py document.pdf

python pdf-parser.py document.pdf # Parses the PDF and lists all objects.
python pdf-parser.py -o 6 document.pdf # Dumps object 6 from the PDF for review.
python pdf-parser.py -f /JS document.pdf # Searches the PDF for JavaScript-related objects.
python pdf-parser.py -c document.pdf # Displays statistics about the contents of the PDF.


