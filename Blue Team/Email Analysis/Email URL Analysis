
Email URL Analysis is the process of inspecting and evaluating URLs within emails to identify potential threats, such as phishing links or malware.

- Link -
When analyzing suspicious emails, itâ€™s crucial to handle links carefully. Instead of clicking, right-click the link and choose "Copy Link Location" to inspect the URL without interacting. This prevents the risk of activating potential malware embedded in the link. Always analyze URLs in a safe environment before further action.

- Sublime Text -
Use the "Sublime Text" editor for analyzing email headers or URLs. In the context of email URL analysis, search for "HTTP" (or "HTTPS") to identify and inspect embedded links. Also, search for the <a> tag, which is used for hyperlinks. This allows you to view the full URL without clicking, providing a safe method to identify potential phishing or malicious sites.

- CyberChef -
Use CyberChef for email analysis tasks such as decoding quoted-printable strings, extracting URLs, and defanging malicious links. The "From Quoted Printable" operation helps decode encoded content, while the "Extract URLs" function identifies all URLs. To prevent accidental clicks on malicious links, use the "Defang URL" operation, which modifies URLs to render them safe for analysis without activating the link.


- Email IOC Extractor -
Email IOC Extractor is a Python script used for email forensic analysis, designed to automatically extract Indicators of Compromise (IOCs) from email files. It captures critical components such as IP addresses, URLs, email headers, and attachments.

Usage: python3 eioc.py <file_path>

$ python3 eioc.py sample1.eml 
Extracted IP Addresses:
====================================
209[.]85[.]128[.]170 - Atlanta, Georgia, US, ISP: AS15169 Google LLC
10[.]13[.]153[.]59

Extracted URLs:
====================================
hxxps[://]drive[.]google[.]com/file/d/1sdzd_hr-_bEt_tJabjINZfvYiOvEJjSJ
hxxps[://]apply-submite[.]vercel[.]app/

Extracted Headers:
====================================
Date: Mon, 31 Oct 2022 11:53:21 +0300
Subject: [Action required] Verify your info to continue using your account
To: undisclosed-recipients:;
From: Ropo12g Gaming <jodykrier60@gmail.com>
Return-Path: jodykrier60@gmail.com
Message-ID: <CANEy_Dj91bGpyHqz1fkK81s=JK9HDxUgYmg+2doKL01ZwbJaSg@mail.gmail.com>
X-Sender-IP: 209.85.128.170
Authentication-Results: spf=pass (sender IP is 209.85.128.170)

Extracted Attachments:
====================================
Filename: 3spyWy0D.pdf
MD5: 42f1cb17cee1027608917094c3fe99b9
SHA1: 5c8d32e624ec8074e3b6e97f48b3839faeacd7ee
SHA256: 6bd89500da5666a9444d2cd9af7a1fe4c945ea9fb31562d97018fdb2799dbda3


- Python Script for IOC Extraction -

import re

def extract_iocs(email_text):
    ip_pattern = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
    url_pattern = r'(https?|ftp):\/\/[^\s\/$.?#].[^\s]*'
    email_pattern = r'[\w\.-]+@[\w\.-]+\.\w+'
    ips = re.findall(ip_pattern, email_text)
    urls = re.findall(url_pattern, email_text)
    emails = re.findall(email_pattern, email_text)
    return {"IPs": ips, "URLs": urls, "Emails": emails}

Useful Regex Patterns:

IP Addresses: \b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b
URLs: (https?|ftp):\/\/[^\s\/$.?#].[^\s]*
Email Addresses: [\w\.-]+@[\w\.-]+\.\w+
MD5 Hash: [a-fA-F0-9]{32}
SHA1 Hash: [a-fA-F0-9]{40}
SHA256 Hash: [a-fA-F0-9]{64}


- Analyze URL Reputation Check -
When performing URL reputation checks, it's important not to blindly trust the results of automated tools. Each tool has its advantages and disadvantages, and understanding the methodology behind them is crucial for making informed decisions during threat analysis.

Tools and Their Use Cases:

URL2PNG: Captures screenshots of a webpage for visual inspection.
- Advantage: Helps visually identify phishing sites.
- Disadvantage: Does not analyze the page content.

urlscan.io: Provides detailed scans of URLs, including resource loading and script behavior.
- Advantage: In-depth behavior analysis of websites.
- Disadvantage: Limited to known malicious signatures.

VirusTotal: Aggregates results from multiple antivirus engines.
- Advantage: Quick, multi-engine analysis.
- Disadvantage: May produce false positives or negatives.

URLVoid: Checks URL reputation across multiple databases.
- Advantage: Broad reputation analysis.
- Disadvantage: Does not provide detailed behavior insights.

wannabrowser: Mimics various browsers to test how a URL responds to different user agents.
- Advantage: Tests how a website behaves in different browsers.
- Disadvantage: Does not analyze content for threats.

Unshorten: Expands shortened URLs for full visibility.
- Advantage: Exposes hidden links.
- Disadvantage: Provides no further analysis beyond unshortening.

PhishTank: Identifies phishing websites through a community-driven database.
- Advantage: Community-sourced database for phishing.
- Disadvantage: May miss new phishing sites.

URLHaus: Focuses on malicious URLs, specifically for distributing malware.
- Advantage: Specialized in identifying malware.
- Disadvantage: Limited focus on non-malware threats.

Google Safe Browsing: Protects against malicious sites by warning users.
- Advantage: Built into many browsers, regularly updated.
- Disadvantage: May miss less common threats.

JoeSandbox: Performs in-depth dynamic analysis of URLs and attached files.
- Advantage: Thorough behavior analysis of URL and content.
- Disadvantage: Resource-intensive and slower.

Before relying on any of these tools, understanding the methodology behind them is essential to avoid false confidence in results and ensure a thorough, multi-layered analysis.


References:

https://gchq.github.io/CyberChef/
https://github.com/MalwareCube/Email-IOC-Extractor
https://phishtank.org/
https://www.url2png.com/
https://urlscan.io/
https://www.virustotal.com/gui/home/upload
https://www.urlvoid.com/
https://www.wannabrowser.net/
https://unshorten.it/
https://urlhaus.abuse.ch/
https://transparencyreport.google.com/safe-browsing/search
https://www.joesandbox.com/
