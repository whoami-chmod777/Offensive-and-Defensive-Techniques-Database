
--- IDS (Snort) ---

• Introduction to IDS
• Introduction to snort
• 
• 


-- Introduction to IDS --

What is IDS?
An Intrusion Detection System (IDS) is a security software that observes network traffic for malicious activities and promptly alerts administrators. It monitors networks or systems for policy violations. IDS safeguards against unauthorized access, even from insider threats, by distinguishing between malicious and normal connections. The primary task of an IDS is to build a predictive model, such as a classifier, to 
identify and respond to potential intrusions or attacks.

Types of IDS 
Network Intrusion Detection System (NIDS): Network Intrusion Detection Systems (NIDS) are strategically placed within a network to analyze traffic from all devices. They observe traffic across the entire subnet, comparing it to a database of known attacks. Upon detecting an attack or abnormal behavior, NIDS sends alerts to administrators.
Host Intrusion Detection System (HIDS): Host Intrusion Detection Systems (HIDS) operate on individual hosts within a network. They monitor incoming and outgoing packets specifically for the host they are installed on and notify administrators of suspicious or malicious activities. HIDS takes snapshots of system files, comparing them to previous snapshots, and issues alerts if changes are detected. HIDS is often deployed on mission-critical machines where stable configurations are expected.
Protocol-based Intrusion Detection System (PIDS): A Protocol-based Intrusion Detection System (PIDS) is a security mechanism located at the server's front end, overseeing and interpreting communication protocols between users/devices and the server. Specifically designed for securing web servers, it continuously monitors the HTTPS protocol stream and accepts the associated HTTP protocol. Given that HTTPS is encrypted, PIDS operates in the interface between the encrypted HTTPS and the unencrypted HTTP, providing an additional layer of security.
Application Protocol-based Intrusion Detection System (APIDS): An Application Protocol-based Intrusion Detection System (APIDS) is a security system or agent typically located among a group of servers. It specializes in identifying intrusions by monitoring and interpreting communication on application-specific protocols. For instance, it might focus on monitoring the SQL protocol between middleware and the database in a web server to detect potential intrusions.
Hybrid Intrusion Detection System: A Hybrid Intrusion Detection System combines two or more intrusion detection approaches, integrating host agent or system data with network information to gain a comprehensive view of the network system. It is considered more effective than other intrusion detection systems. An example of a Hybrid IDS is Prelude.

Monitoring and Analysis:
• Purpose: IDS continuously monitors network or system activities, analyzing data to identify patterns or behaviors that may indicate a security incident.
• How It Works: IDS collects and analyzes network traffic, log files, and system events to identify anomalies or patterns associated with known attack signatures.

Detection Mechanisms
• Signature-Based Detection: Signature-based Intrusion Detection Systems (IDS) identify attacks by matching specific patterns, such as byte 
  counts or sequences of 1s and 0s, in network traffic. They also recognize known malicious instruction sequences used by malware. These 
  identified patterns are termed "signatures." While effective at detecting known attacks with existing signatures, signature-based IDS faces challenges in detecting new malware attacks, as their patterns are not yet known.
• Anomaly-based Method: Anomaly-based Intrusion Detection Systems (IDS) were developed to identify unknown malware attacks that emerge rapidly. This approach employs machine learning to establish a trustworthy activity model. Incoming data is compared to this model, and anything deviating from it is flagged as suspicious. Machine learning-based methods in anomaly-based IDS offer improved adaptability compared to signature-based IDS, as the models can be trained based on specific applications and hardware configurations, enhancing their ability to detect novel threats.

Response and Mitigation:
• Purpose: IDS provides information to facilitate a response to security incidents.
• How It Works: While IDS itself does not take direct actions to block or prevent attacks, it can provide information to security personnel for mitigation efforts.


-- Introduction to snort --

What is snort?
Snort is the foremost Open Source Intrusion Prevention System (IPS) in the world. Snort IPS uses a series of rules that help define malicious network activity and uses those rules to find packets that match against them and generates alerts for users. Snort can be deployed inline to stop these packets, as well. Snort has three primary uses: As a packet sniffer like tcpdump, as a packet logger - which is useful for network traffic debugging, or it can be used as a full-blown network intrusion prevention system. Snort can be downloaded and configured for personal and business use alike.

Using snort
The default folder for Snort, when installed on a Linux system, is typically in the /etc/snort/ directory. Snort generates various log files that are often stored in the /var/log/snort/ directory. These logs include alert logs, packet logs, and others, depending on the configuration. We mainly discuss on rules directory and snort.conf file.

Snort Rules: The rules folder in the /etc/snort/ directory is a crucial component of Snort, containing the rulesets that define conditions under which Snort should generate alerts. Each rule within these sets specifies patterns, signatures, or characteristics associated with malicious activities. When network traffic matches these patterns, Snort generates an alert. The rules folder contains multiple Snort rule files, and each file may be associated with specific types of attacks or network behaviors. Rule files within the rules folder have names like local.rules, attack-responses.rules, backdoor.rules, etc.
• Local Rules (local.rules): Users often add their own custom rules to this file. It's a place to include rules specific to the local network or to customize Snort's behavior.
• Attack Responses (attack-responses.rules): Contains rules related to responses against detected attacks.
• Backdoor Rules (backdoor.rules): Contains rules associated with backdoor activities.

Snort rule syntax: Snort uses a specific syntax for its rules, which are used to define the conditions under which Snort should generate an alert. 

Here is a basic structure of a Snort rule: action protocol source_ip source_port -> destination_ip destination_port

• Action: Specifies the action to be taken when the rule matches. Common actions include alert, log, pass, and activate.
• Protocol: Specifies the protocol to be examined (e.g., TCP, UDP, ICMP).
• Source IP: Defines the source IP address or IP range.
• Source Port: Specifies the source port or port range.
• Direction Arrow (->): Indicates the direction of traffic.
• Destination IP: Defines the destination IP address or IP range. - Destination Port: Specifies the destination port or port range.

Overview of Snort config file
The snort.conf file is the central configuration file for Snort, a powerful intrusion detection system. This file is organized into different sections, each responsible for configuring specific aspects of Snort's behavior. One crucial section involves setting network variables, where administrators define the network or subnet to be monitored using the home_net variable. Typically, the external_net variable is left flexible to monitor any external network.

###############################################
# Step #1: Set the network variables.  For more information, see README.variables
###############################################

# Setup the network addresses you are protecting

# Note to Debian users: this value is overriden when starting
# up the Snort daemon through the init.d script by the
# value of DEBIAN_SNORT_HOME_NET is defined in the
# /etc/snort/snort.debian.conf configuration file

ipvar HOME_NET any

# Set up the external network addresses. Leave as "any" in most situations
ipvar EXTERNAL_NET any
# If HOME_NET is defined as something other than "any", alternative, you can
# use this definition if you do not want to detect attacks from your internal
# IP addresses:
#ipvar EXTERNAL_NET !$HOME_NET

# List of DNS servers on your network
ipvar DNS_SERVERS $HOME_NET

# List of SMTP servers on your network
ipvar SMTP_SERVERS $HOME_NET

# List of web servers on your network
ipvar HTTP_SERVERS $HOME_NET


The configuration file also allows for the inclusion of specific hosts like DNS servers within the critical infrastructure. Moving beyond network variables, the file specifies the path to the rules file, pointing to the default rule path. Rule customization is a significant aspect, with users defining rules in a user-specific file, often named local.rules.

portvar GTP_PORTS [2123,2152,3386]

# other variables, these should not be modified
ipvar AIM_SERVERS [64.12.24.0/23,64.12.28.0/23,64.12.161.0/24,64.12.163.0/24,64.12.200.0/24,205.188.3.0/24,205.188.5.0/24,205.188.248.0/24]

# Path to your rules files (this can be a relative path)
# Note for Windows users: You are advised to make this an absolute path,
# such as:  c:\snort\rules
var RULE_PATH /etc/snort/rules
var SO_RULE_PATH /etc/snort/so_rules
var PREPROC_RULE_PATH /etc/snort/preproc_rules

# If you are using reputation preprocessor set these
# Currently there is a bug with relative paths, they are relative to where snort is
# not relative to snort.conf like the above variables
# This is completely inconsistent with how other vars work, BUG 89986
# Set the absolute path appropriately
var WHITE_LIST_PATH /etc/snort/rules
var BLACK_LIST_PATH /etc/snort/rules

###############################################
# Step #2: Configure the decoder.  For more information, see README.decode
###############################################

# Stop generic decode events:
config disable_decode_alerts


In the rules section, the snort.conf file provides the flexibility to include or exclude rule files, allowing users to manage community-contributed rules easily. The organizational structure encourages a clear distinction between user-defined rules and those developed by the Snort community. When Snort is executed, it loads two categories of rules: user-defined rules from local.rules and community rules from separate files, covering various threat categories. This organizational approach enhances the clarity and effectiveness of Snort's intrusion detection capabilities, offering a tailored and modular configuration for network security.

###############################################
# Step #7: Customize your rule set
# For more information, see Snort Manual, Writing Snort Rules
#
# NOTE: All categories are enabled in this conf file
###############################################

# Note to Debian users: The rules preinstalled in the system
# can be *very* out of date. For more information please read
# the /usr/share/doc/snort-rules-default/README.Debian file

#
# If you install the official VRT Sourcefire rules please review this
# configuration file and re-enable (remove the comment in the first line) those
# rules files that are available in your system (in the /etc/snort/rules
# directory)

# site specific rules
include $RULE_PATH/local.rules

# The include files commented below have been disabled
# because they are not available in the stock Debian
# rules. If you install the Sourcefire VRT please make
# sure you re-enable them again:

#include $RULE_PATH/app-detect.rules
include $RULE_PATH/attack-responses.rules
include $RULE_PATH/backdoor.rules
include $RULE_PATH/bad-traffic.rules
#include $RULE_PATH/blacklist.rules
#include $RULE_PATH/botnet-cnc.rules


Example: In this demonstration, a custom rule has been crafted to monitor ICMP ping attempts. In the accompanying image, both the Attacker machine (Kali) and the Target machine (Ubuntu) are visible, providing a visual representation of the lab setup.

Disabled all community rules on the target machine by commenting them out.

# site specific rules
include $RULE_PATH/local.rules

# The include files commented below have been disabled
# because they are not available in the stock Debian
# rules. If you install the Sourcefire VRT please make
# sure you re-enable them again:

##include $RULE_PATH/app-detect.rules
#include $RULE_PATH/attack-responses.rules
#include $RULE_PATH/backdoor.rules
#include $RULE_PATH/bad-traffic.rules
#include $RULE_PATH/blacklist.rules
#include $RULE_PATH/botnet-cnc.rules
#include $RULE_PATH/browser-chrome.rules
#include $RULE_PATH/browser-firefox.rules
#include $RULE_PATH/browser-ie.rules
#include $RULE_PATH/browser-other.rules
#include $RULE_PATH/browser-plugins.rules
#include $RULE_PATH/browser-webkit.rules
#include $RULE_PATH/chat.rules
#include $RULE_PATH/content-replace.rules
#include $RULE_PATH/ddos.rules
#include $RULE_PATH/dns.rules
#include $RULE_PATH/dos.rules
#include $RULE_PATH/experimental.rules


Started Snort to monitor for alerts: snort -q -i ens5 -A console -c /etc/snort/snort.conf

Attempted to ping from the Attacker machine. No logs were generated. This is expected because no rules are implemented for alerting.

Created a custom rule in the local.rules file located at /etc/snort/rules/local.rules.

# $Id: local.rules,v 1.11 2004/07/23 20:15:44 bmc Exp $
# ----------------
# LOCAL RULES
# ----------------
# This file intentionally does not come with signatures. Put your local
# additions here.

alert icmp any any -> $HOME_NET any (msg:"ICMP Ping Detected"; sid:100001; rev:1;)


Restarted Snort

nano /etc/snort/rules/local.rules
snort -q -i ens5 -A console -c /etc/snort/snort.conf

Attempted to ping from the Attacker machine again. This time, alert messages are visible on the Target machine.

root@ip-10-0-30-234:~# snort -q -i ens5 -A console -c /etc/snort/snort.conf
^C*** Caught Int-Signal
root@ip-10-0-30-234:~# nano /etc/snort/rules/local.rules
root@ip-10-0-30-234:~# snort -q -i ens5 -A console -c /etc/snort/snort.conf
12/12-03:55:38.604762  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.10.21.4 -> 10.0.30.234
12/12-03:55:38.604784  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.0.30.234 -> 10.10.21.4
12/12-03:55:39.606108  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.10.21.4 -> 10.0.30.234
12/12-03:55:39.606193  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.0.30.234 -> 10.10.21.4
12/12-03:55:40.607513  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.10.21.4 -> 10.0.30.234
12/12-03:55:40.607535  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.0.30.234 -> 10.10.21.4
12/12-03:55:41.608996  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.10.21.4 -> 10.0.30.234
12/12-03:55:41.608990  [**] [1:100001:1] ICMP Ping Detected [**] [Priority: 0] {ICMP} 10.0.30.234 -> 10.10.21.4

*
