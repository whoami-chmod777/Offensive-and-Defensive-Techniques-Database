
Asymmetric encryption, also known as public-key cryptography, is a cryptographic system that uses a pair of keys for secure communication. The two keys are mathematically related but are not identical. One key is designated as the "public key," and the other is the "private key." The public key can be freely distributed to anyone. It is used for encryption. The private key is kept secret and should only be known to the owner. It is used for decryption. Popular asymmetric encryption algorithms include RSA (Rivest-Shamir-Adleman), DSA (Digital Signature Algorithm), and ECC (Elliptic Curve Cryptography).


Objective: Perform an asymmetric encryption & decryption using RSA algorithm by completing the following tasks:

Task 1: Generate key-pairs for Alice and Bob on their respective machines and share Bob's public key to Alice.
Taks 2: Being Alice, encrypt a text file using the public key of Bob and share the encrypted file to Bob for decryption.


In this lab, we learned how to perform a asymmetric key encryption & decryption for a text file using OpenSSL.

Step 1: Open the lab link to access the machines
Step 2: You can check if OpenSSL is installed using the following command: openssl version

OpenSSL is a full-featured toolkit for general-purpose cryptography and secure communication.

Step 3: The text file we need to encrypt & decrypt is present in /root/Desktop/resources/ on Alice's machine. 

The text file we need to encrypt & decrypt is confidential-data.txt. You can check its content: cat confidential-data.txt

What is RSA?
The RSA (Rivest–Shamir–Adleman) algorithm is a widely used public-key cryptosystem that enables secure data transmission and digital signatures. It was named after its inventors Ron Rivest, Adi Shamir, and Leonard Adleman, who first publicly described the algorithm in 1977. RSA uses a pair of keys: a public key and a private key. The public key can be freely distributed, while the private key must be kept secret. Encryption is performed using the recipient's public key, and decryption is performed using the corresponding private key.
For more details, refer: https://en.wikipedia.org/wiki/RSA_(cryptosystem)


>> Task 1: Generate key-pairs for Alice and Bob on their respective machines and share Bob's public key to Alice <<

Step 4: On the Alice's machine, run the following command to generate Alice's RSA private key with a key length of 2048 bits: openssl genrsa -out alice-private-key.pem 2048

The private key file for Alice was succesfully created. You can view its content: cat alice-private-key.pem

-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAuFgyTkNKoKxdxOcWJhHHqEiOkOkzvkjW2+sbWsLHTAIoYoNY
QlktQtbghqe0W5oy2ovd7EUq+LAc3gfFqACsEV+qkrqXRIoBGSwhTtnyvdyIeZB
bzpXS7gCzkq8DXVfqMe5GNl2/CojLERn7oibJiomVFoqqP0uTdCiRGkhTWAB6hK
zKrNiXSzY4ArMojF6t3+ipIXoALkonnR22ccxXawOj6NrBcPhe9T0Bt+DFy6bT
adD1V07AkMNw+bb2a2koF+OiCyIHukr8hnWUcJ8sJVLHpi3kYySTt+URtNHAph4I
3ugguy95QNBY1iiy2nq54IoZKrOhLAejcmDozQIDAQABAoIBAQEpUuMYWt4YDLz
CscIGZnF1ZFAfxsdGNJnxipSmBdacq/7RPnkgTDcI4ZKUYCT0qTS9aVAewf/toX2
Y7MrYBnq0CJRo6H1k2PCZF49C7geH+F2pE27W5NZyPgEHAigJMpqwsol45X2Ql63
yK8T8CtgmhhN79k04ZzfX18CTstU0eiq3mmWnWp3ycIIBu0y7OtYx7xb7IcJMt+UV
Zkah3agdjZ4+/suph80h695l3poYHtiPEuxygUGRqCzsBAg7iM4TT3nIzyJDs0jJ
k2ZBr1HwDhQhrYUU08xsjYHhHSPEfdVrvywNSat/Wn98AL9TGP8mfgVtUFawNk+0j
kHBT1cwEcgYEA2USB10Cy3ZBmFZ+acxGc3f23S0+U8PWm3FAs7r+oUnf6bLEhp2
5EnhKxp85i6fkG0ElE6nGkKLvc6hru4b8gI1ifknYgQ2tpU2q55FERUTqnC6v2m
tX9D9eW8oNvbLJ6dU5O71n8cG4Y7kd4Zw5g64ikdSp7Aw+sblqdJydiK0gYEA2Ur
Zs6D1ZeyzART1/bLjz79uFOX32+I/59tfT7rUHKe/3WF9Zj3GYracN9oSY1wUDQu
mPVExahofIdTwXZbxvxqA0f3uXcYauzVigXnhQbvLzqpz9Cu7rGaMax/NPiSLNsG
2C7gFm5oTshkY5RJ9NyvDUoRabF3pEvZGrj0twkd+CARKECgYEAs1y6WywAAc7b1
NndRc3BRrM4g64teAYcv/D6/pxiHHucFbJY73+0BFSHA8yjaLBY4sy0R/qSByNgj
asYBj0ebLW40vIQRwXQ02IlVsJr4YuMB1zxLczrYI/v2rDzLSedgVY1ss9iwWkIN
5NbJz2gVyH1ccclhDwcUqneC5yRBmHzjW9kM3S4c1+7RGozeslawfe5r5N22nscJ
XIdLqqvxM6m0X882di4tcoch4kMnSBs5ND62M9jP56cjp/fUE+gtp375wmJf4sm
Ngeqpo9tQEk0I6f3x/8ETelJ9JHjwRKgpxzNovg6WzJKy8SLi3AzSIJlx+AFSXc
Gy7vDy8NUc4uY1VsmM9ImPNFung+Tnsqf3Hc456nbDraK4nyABtjyYeiLcHc2aS
VwuvRCdn3oh6v6LfJ5tdFkzRlvbTmFe2vpl7+bC8xpr4DugOUY2QvnSYT3SIdKc
UwSpAF1kQx3PZY8MtkjEj08YJ7N9VLkWNjTpUnESkhhXARlVbX+
-----END RSA PRIVATE KEY-----

Step 5: Next, derive Alice's RSA public key from the private key using the following command: openssl rsa -pubout -in alice-private-key.pem -out alice-public-key.pem

The public key file for Alice was successfully created. You can view its content: cat alice-public-key.pem 

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuFgyTkNKoKxdxOcWJhHH
qEiOkOkzvkjW2+sbWsLHTAIoYoNYlQktQbhqe0W50zy2Ovd7EUq+LAc3gfFqACs
EV+qkrqXRIoBGSwhTtnyvdyIeZB8zpXS7gCzkQ8dXVfqMe5GNl2/CojLERn7oib
JiomVFoqqP0uTdCiRGkhTWAB6hKSkrNiXSzY4ArM0jF6t3+ipIXoALkonnR22cc
xXawOj6NrBcPhe9T0Bt+DFy6DlhD1VY07AkMNw+bbZa2koF+OiCyIHukr8hnnU
w6J8sJVLHpi3kYySTt+URtNAHp4IBuguy95QNBv1liy2nQ54IoZKrOhLAejcmDo
zQIDAQAB
-----END PUBLIC KEY-----


Step 6: Similarly, switch to Bob's machine and repeat the steps to generate a key-pair for Bob. 

Run the following command to generate Bob's RSA private key with a key length of 2048 bits: openssl genrsa -out bob-private-key.pem 2048

The private key file for Bob was succesfully created. You can view its content: cat bob-private-key.pem

-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAx2wA20KDgC0WyVqBB3a6Ru/ciFuuKm4BzvknlPLn2VwcY9w
ryzExWkBo6KTPs3WJfXdWUY+JaNTIY+EDqpLgBjZFEsG00sRZJasdvcPDlKvH+qn
DK8B25Ry4390XPp550J1CoUl1MxvGuq8LzPtiv9220cbcCvUlyZpz68Z3BUNzCwfY
SKI7biX0cvx5jh8IODC1QXbH3tCtvs0+Lw+2ajC01pDc4aCBtYgeg9xCTMvargq8
so0a0c9IFhEvAetxhIjcGPVi1wzBuEIDITeI6jdtOb3tqeLW5fc7RHF3rJ3aWtFwF
XWdV0qbDN0ij7omGZqarG9dP6dmBob09aDQIDAQABAoIBAFOhrV4/3B+6u2NX
4UhEB1hNJP++fC0vpGYFHpGGpcrmXmP9ctB56jRndM/3SPmY33nmH2mU5pEYs2X
7AL+7fhLxeL+Cdd5Y1D9X8LBcVAAjV4N2Q+N/qy5ydQwrRWmqH4aLWs/i22ns
DDo3NE+jQ20SicecwofkPKQ95i/OVbkiLIVT2D5vdstvujrEKXM3UnB0xqBdSxYp
BLXqIHgRRRlwjME/p6d+5zRWZuBPgPyljqmQ+IAIGQnkFc4fsDStCu0qMYsde5b
I9cXtywLQJ47EVmbRcVrlL3rvEGoZm9w8b1b8L3toa0EMcp5dAwEVTlO/iqu19v
USED55UcgyEA98fouRE+AtScnv+vUi0VCvY+5gVomGd/Sjcic+GmbkzVoiMonAgT
r8a0Dk4zqNmw05MeE02rRHKVLHDGEbA2s0b+Cf1tL7RGozesLawfe5r5N22nscJ
5wcaIxxJvXq+WkV1fx/ERMh+NA669RbCmjQpNUg5/p46kcFffDNd8cgYEAYzlx
LxPXqnAGIia8FhBKrswN2KqTEyc2cLBoAfahGxHMPURGSINImoG8NWkFSsSabTL
8dEjrj5ip0n3MyybRL2SQSyBFoyhtNZfAkmV+8jqUzOJcvfjwtTgZSmrXCfx3gY
dqa97itluie8bRt8/v6vQP8QJQckf6XPmLUfd4MCZyATWxrs5n7ltaLzvg+7cmg5
6WbEB8wS07Zsme07gzZIIGtc9dfVnnfGeaFnyis/Od+tFi4tghAm7ndhfL2ODJ
3azNa0Xnt4mEZegVLbqVUl06M3Jcgj7Mitz5LgdmMBW9okyXZkKcr5c7pVgJ
Kp1qJGCGcwRj0xRKDimmvwkBgQDHpMFS2egqgJAF7lFgzkymUyJsdwxuJdxb9
afocAXHUvnxFG43s6nUnsiE0Y7HgDgM6WwrW7EMiKoM/qlg1+khnOaJcf2oWh
clUruwH5fJmLHqe96oBxcudHhzN9l5uG05OncF7AvMZsck5fYZWUHFgbmrV9r
GRGUSwBKhKIFtFtrPk21GJlLAVR7q6kvCmWEzmhH8c0X09FqMp3T2UqsJDhIG
l7YZJ6fzCBtsysbBOlEMeMj+5ijeyQtW2rr+f5o05do3fh/8q0f69ee/b7cMyp
qMM90D3pTr9Q049AXua5zqXaDqua60v7+uMWJwJ/AsxcaIhUPS
-----END RSA PRIVATE KEY-----

Step 7: Next, derive Bob's RSA public key from the private key using the following command: openssl rsa -pubout -in bob-private-key.pem -out bob-public-key.pem

The public key file for Bob was successfully created. You can view its content: cat bob-public-key.pem

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx2wA20KDgC0WyVqBB3a6
Ru/ciFuuKm4BzvknlPLn2VwcY9wryzEXWkBo6KTPs3WJfXdWUY+JaNTIY+EDqpl
gBjZFEsG00sRZJasdvcPDlKvH+qn0KB8z5Ry4390XPp550J1CoUlMxvGqu8LzPt
iv9220cbcCvUlyZpz68Z3BUNzCwfYSKI7biX0cvx5jh8IODC1QXbH3tCtvs0+Lw
+2aJc01pDc4aCBtYgeg9xCTMvargq8s0a0c9IFhEvAetxhIjcGPVi1wzBuEIDIT
eI6jdtOb3tqeLW5fc7RHF3rJ3aWtRwFXWvd0qbDNoij7omGZqarG9d0Pd6mBob0
9aDQIDAQAB
-----END PUBLIC KEY-----


Step 8: Now, we need to share Bob's public key to Alice. So, we can start an HTTP server on the Bob's machine to serve the public key file. 

Check Bob's machine IP: ip addr

10.0.26.112 is the IP address of Bob's machine.

Start an HTTP server utilizing port 8080 on Bob's machine by running the following command from the current directory i.e. where the public key file is present: python3 -m http.server 8080

Step 9: Switch to Alice's machine. Fetch Bob's pubic key using the following command: curl http://10.0.26.112:8080/bob-public-key.pem -o bob-public-key.pem

Check the content: cat bob-public-key.pem

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx2wA20KDgC0WyVqBB3a6
Ru/ciFuuKm4BzvknlPLn2VwcY9wryzEXWkBo6KTPs3WJfXdWUY+JaNTIY+EDqpl
gBjZFEsG00sRZJasdvcPDlKvH+qn0KB8z5Ry4390XPp550J1CoUlMxvGqu8LzPt
iv9220cbcCvUlyZpz68Z3BUNzCwfYSKI7biX0cvx5jh8IODC1QXbH3tCtvs0+Lw
+2aJc01pDc4aCBtYgeg9xCTMvargq8s0a0c9IFhEvAetxhIjcGPVi1wzBuEIDIT
eI6jdtOb3tqeLW5fc7RHF3rJ3aWtRwFXWvd0qbDNoij7omGZqarG9d0Pd6mBob0
9aDQIDAQAB
-----END PUBLIC KEY-----

We now have the public key of Bob. Exit the HTTP server on Bob's machine.


>> Taks 2: Being Alice, encrypt a text file using the public key of Bob and share the encrypted file to Bob for decryption <<

Step 10: Now, encrypt the confidential-data.txt file using the public key of Bob. Run the following command: openssl rsautl -encrypt -in confidential-data.txt -inkey bob-public-key.pem -pubin -out encrypted.bin

Check the encrypted.bin file: cat encrypted.bin

The data is encrypted. This data can only be decrypted by Bob using his private key!

Step 11: Now, we need to share the encrypted file to Bob. So, we can start an HTTP server on the Alice's machine to serve the encrypted file. 

Check Alice's machine IP: ip addr

10.0.19.73 is the IP address of Alice's machine. 

Start an HTTP server utilizing port 8080 on Alice's machine by running the following command from the current directory i.e. where the encrypted file is present: python3 -m http.server 8080

Step 12: Switch to Bob's machine. Fetch the encrypted file using the following command: curl http://10.0.19.73:8080/encrypted.bin -o encrypted.bin

Step 13: Finally, decrypt the file using Bob's private key. Run the following command: openssl rsautl -decrypt -in encrypted.bin -inkey bob-private-key.pem -out decrypted.txt

Check the content: cat decrypted.txt

The file has been successfully decrypted by Bob.

In this lab, we learned how to perform an asymmetric encryption & decryption using RSA algorithm for a text file using OpenSSL. However, note that RSA is not ideal for encrypting large user data. More often, RSA is used to transmit shared keys for symmetric-key cryptography, which are then used for bulk encryption–decryption.


>> Commands Overview <<

openssl version
cat confidential-data.txt

openssl genrsa -out alice-private-key.pem 2048
cat alice-private-key.pem

openssl rsa -pubout -in alice-private-key.pem -out alice-public-key.pem
cat alice-public-key.pem 

openssl genrsa -out bob-private-key.pem 2048
openssl rsa -pubout -in bob-private-key.pem -out bob-public-key.pem

ip addr
python3 -m http.server 8080
curl http://10.0.26.112:8080/bob-public-key.pem -o bob-public-key.pem

cat bob-public-key.pem
openssl rsautl -encrypt -in confidential-data.txt -inkey bob-public-key.pem -pubin -out encrypted.bin
cat encrypted.bin

ip addr
python3 -m http.server 8080
curl http://10.0.19.73:8080/encrypted.bin -o encrypted.bin

openssl rsautl -decrypt -in encrypted.bin -inkey bob-private-key.pem -out decrypted.txt
cat decrypted.txt


https://www.openssl.org/
https://en.wikipedia.org/wiki/RSA_cryptosystem
