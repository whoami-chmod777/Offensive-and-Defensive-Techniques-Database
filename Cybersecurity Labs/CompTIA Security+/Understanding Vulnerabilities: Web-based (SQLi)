
SQL Injection (SQLi) is like a sneaky way that bad actors use to mess with a website's database. It happens when the website doesn't properly check the information people type in (like in search boxes or login forms) before using it to talk to the database. The bad guys can then insert their own instructions, making the database do things it shouldn't, like giving them access to secret information or messing up the data. To stop this, web developers need to make sure they check and handle user input carefully, so the bad instructions can't sneak in and cause trouble. SQL Injection commonly targets input fields, such as login forms, search boxes, or any user-input area that interacts with a database.

In this lab environment, the user will get access to a Kali instance's GUI. A vulnerable application is running on http://demo.ine.local. Your task is to find and exploit the SQL Injection (SQLi) vulnerability present in the application.

Objective: To find and exploit the SQL Injection (SQLi) vulnerability present in the application.

These credentials might be helpful:
Email: bob@inestudent.com
Password: Bob@123

The best tools for this lab are: Firefox Web Browser


Step 1: Open the lab link to access the Kali machine.

Step 2: Verify whether the target machine is up.

Open the terminal and run the command: ping -c 4 demo.ine.local

The target machine is up and running.

Step 3: Open the web browser and visit the URL: http://demo.ine.local

Here, we have the sign-up and login options.

Step 4: Let's login with Bob's credentials. Click on the "Log In" button.

Enter the following credentials:

Email: bob@inestudent.com
Password: Bob@123

Click on the "Log In" button. Here, you can see the Bob user's profile. Now, click on the "Logout" button.

Step 5: Go to the login page and perform the SQL Injection attack.

Click on the "Log In" button.

Here, we will be performing the SQL injection attack, but to perform SQLi, we need a payload. You can find tons of Github repositories for payloads. One such repository is https://github.com/payloadbox/sql-injection-payload-list.

Use the payload given below in the email field and type any random password: ' OR 1 -- -

The SQL injection payload ' OR 1 -- - is an attempt to manipulate a SQL query. It uses a single quote to close the existing SQL string, injects a condition that is always true (OR 1), and uses SQL comments (--) to ignore the rest of the original query. This can potentially bypass authentication or authorization checks in a vulnerable web application and allow unauthorized access to data.

Note: Use any random string as a password, e.g., "hiii," and the above-given payload as an email.

Click on the "Log In" button.

Voila! We got logged in as the "Admin" user.


https://github.com/payloadbox/sql-injection-payload-list.



>> Commands Summarization <<

ping -c 4 demo.ine.local





















