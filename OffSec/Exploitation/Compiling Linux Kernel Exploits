
--- Compiling Linux Kernel Exploits ---

Linux kernels[1] have a long history of local privilege escalation vulnerabilities which allow non-privileged users to escalate their privileges to root. Despite continual improvement and development work on kernels, some of these vulnerabilities were present for over a decade before being discovered. For example, DirtyCOW (CVE-2016-5195) and CVE-2017-6074 leave a lot of Linux hosts vulnerable to privilege escalation. Vulnerabilities like this happen all the time so we need to be familiar with Linux Kernel vulnerabilities and know how to use them in different systems.
In this section we will learn how to transform source code written in high-level programming languages (like C) into a lower level language (assembly language or machine code) and how to create executable programs. This is significantly different from executing code written in interpreted languages (like Python and Perl) which can be executed directly by the interpreter. The transformation from a high-level language to a low-level language is done by a piece of software called a ‘compiler’. The compiler takes the source code as input and provides us with an executable file as an output that can then be executed on the system.
As you will learn later in the privilege escalation chapter, there are privilege escalation scripts that will check databases, like Exploit-db, for suitable exploits automatically, but you can also do this manually. Now we will conduct a manual search on Exploit-db’s Local and Privilege Escalation Exploits database for the kernel version or the Linux distro version. Let’s try running a search for ‘Linux kernel’:
Kernels are software at the heart of a computer system with complete control of all the major operations and functions.


-- Compiling Linux Kernel 2.6.22 < 3.9 (x86/x64) – ‘Dirty COW’ /proc/self/mem Race Condition Privilege Escalation (SUID) --

This exploit creates a passwd binary file with SUID permissions (that is, the file is executed in the context of the file owner instead of the user who runs it, usually root) and upgrades the terminal session with root privileges. The passwd program is a Linux utility to change passwords for user accounts. A regular user may only change the password for his/her own account. By adding SUID permissions the program runs as super user and is able to change the password of any user account, including the root account.

!!! Always be sure to read the comments in exploits as they often inform you about which systems and version are vulnerable, which parts of the script need modification and which compilation flags to use. !!!

gcc cowroot.c -o cowroot

While the number of different compilation options, warnings and errors might seem intimidating at first (especially if you don’t have a lot of experience with programming) try to see every warning/error/option as a learning opportunity. Google every warning and error and try to understand the provided solutions. Also investigate why certain libraries are required, as we did with the pthread library, and understand the relation to the program’s functionality. This will get you a better understanding of what’s happening which will help you to deal more effectively and efficiently with compiling exploits in the future.


-- Compiling Linux Kernel 3.13.0 < 3.19 (Ubuntu 12.04/14.04/14.10/15.04) – ‘overlayfs’ --

gcc ofs.c -o ofs


-- Local VS remote compilation --

If the remote host has compilation tools installed like GCC, it is best to compile the exploit on the target host. This can save you trouble with missing packages, dependencies and system specific variables (such as the architecture). If the target host does not have the right tools available to compile exploits, then you will have to compile the exploit locally on your attack box and then transfer the compiled exploit to the target.
Before compiling the exploit, you will need to make sure that all dependencies required for the target host environment have been met. For example, when the target host runs a 32-bit OS and your attack box has a 64-bit OS, you have to install the 32-bit versions of all the libraries required. For cross-compiling exploits for a different processor architecture you can install gcc-multilib (apt-get install gcc-multilib) and add -m32 for 32-bit or -m64 for 64-bit to the compilation command.
























https://www.exploit-db.com/exploits/40616




