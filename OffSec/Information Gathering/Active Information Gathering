
-- Active information gathering --

Enumeration in the ethical hacking and penetration testing context is the process of retrieving usernames, shares, services, web directories, groups, and computers on a network. This is also called network enumeration. During this process we also collect any other network-related information that may be useful for conducting a penetration test
An important part of the enumeration process involves port scanning and fingerprinting services and applications. Each computer has a number of (physical and software) endpoints that are called ports. We all know physical computer ports, such as USB and HDMI ports, that serves as an interface between the computer and external devices such as storage devices and peripheral devices. Ports in networking are pretty similar to physical ports, except that they are not particularly an interface between the computer and a physical device but between the network service and a client computer program. The computer program or network service that is listening on the port has control over the port and is associated with an IP address making it available for network communication. Communication with the network service takes place by addressing the IP address over the listening port and by following a protocol that the network service is able to understand. The protocol is a pre-defined set of rules that have to be followed by both parties in order to establish successful communication between the client and the server. The sending party has to be aware of the instructions that the receiving party (server) is able to understand so that the server can respond accordingly with information that the sending party (client) is able to understand.
A good example to explain this concept is the web server that is serving a website and the web browser that is able to display the website. If the communication between the server and the client correctly follows the Hypertext Transfer Protocol (often abbreviated to HTTP) it will result in web content successfully delivered to the web browser. This example refers to a web server and the HTTP protocol but there are a lot more protocols, such as the Simple Mail Transfer Protocol (SMTP) to transfer e-mails between computers or the File Transfer Protocol (FTP) to transfer files between computers. But how do we know if a network service is running on a specific port, what software it is and finally what protocol to adhere to? For this we’ll use port scanning and fingerprinting techniques.
Port scanning is used to probe a server or host for open TCP and UDP ports. Fingerprinting is the process of identifying the services connected to those ports and their version numbers. Perhaps the most popular tool for network enumeration, port scanning and fingerprinting is Nmap (which stands for Network Mapper).

• Netdiscover
• Nmap Host Discovery
• Nmap Port Scanning
• Scanning Port Ranges with Nmap
• Nmap Scripting Engine (NSE)
• SNMP Enumeration
• Onesixtyone
• SNMPwalk
• Nmap SNMP Scripts
• SMB Enumeration
• Null Session with rpcclient
• RID Cycling
• Enum4linux
• Nmap SMB Scripts
• 


-- Host Discovery --

Host discovery is the process of finding live hosts on a network and is one of the first steps in network reconnaissance. As a penetration tester we want to be able to identify as many live hosts as possible on the network, even those that try to hide their presence. There are several tools for host discovery that use a variety of techniques. 
It is always best to use multiple tools for host discovery because different tools have more success under different scenarios and circumstances. Results are dependent on variables such as the network environment and configuration-specific parameters on individual hosts and a single technique cannot always guarantee accuracy. 
Netdiscover uses ARP messages, but ARP is not designed to cross network boundaries which means it only works if performed on the same network. An ICMP (ping) scan on the other hand sends ICMP packets, but many host-based firewalls drop ICMP packets by default. This means ping scans are not 100% reliable in host discovery because any host that drops ICMP packets will go unnoticed.


-- Netdiscover --

Netdiscover is an active/passive ARP reconnaissance tool that uses the Address Resolution Protocol (ARP) to find live hosts on a local network. This is because the ARP protocol resolves an IP address to a MAC address on the local network. A MAC address is a unique physical hardware address of a network interface card and is used for communicating with other network devices on the same network. Routers, switches and other network devices send out broadcast ARP requests to all devices on the network asking each device to respond with their MAC address.

'Who has 192.168.1.116? Tell 192.168.100.2'
'192.168.100.116 is at aa:bb:cc:dd:ee'

All responses are then collected and stored in a small database known as the ARP table. Each ARP table entry maps the MAC address to the IP address.
Netdiscover actively searches for live hosts on the network by broadcasting ARP requests as a router does. It calls out to all connected devices asking them to respond by IP address and any host that responds is a live host. This is why this technique is called ‘active ARP reconnaissance’ because the tool actively broadcasts requests to generate replies from live hosts. By default, Netdiscover runs in active mode, but we can also use Netdiscover in passive mode by using the -p option, it will then passively listen on the network and not broadcast anything at all.

netdiscover -r 10.11.1.0/24

# Basic Scan on Default Network
netdiscover

# Scan a Specific IP Range (e.g., 192.168.0.0/24)
netdiscover -r 192.168.0.0/24

# Use a Specific Network Interface (e.g., eth0)
netdiscover -i eth0

# Enable Passive Mode Only (no active ARP requests)
netdiscover -p

# Perform Fast Scanning
netdiscover -f

# Limit the Number of ARP Requests Sent to Each Host (e.g., 5 requests)
netdiscover -c 5

# Scan and Display Unique Hosts Only
netdiscover -d

# Show All Available Network Interfaces
netdiscover -L

# Scan a Range with a Specific Interface (e.g., eth0 on 192.168.1.0/24)
netdiscover -i eth0 -r 192.168.1.0/24

# Use Passive Mode and Suppress Active Discovery
netdiscover -P

# Custom MAC Vendor File for Resolving Vendors
netdiscover -m /path/to/mac_vendor_file.txt


-- Nmap Host Discovery --

This option tells Nmap to perform host discovery only without any additional port scanning and prints out details of any hosts that responded

# Ping Sweep (No Port Scan)
nmap -sn 192.168.1.144

# Skip Host Discovery (Scan All IPs)
nmap -Pn 192.168.1.144

# Custom TCP SYN Ping
nmap -PS22 192.168.1.144

# TCP ACK Ping to Multiple Ports
nmap -PA80,443 192.168.1.144

# UDP Ping on Specific Ports
nmap -PU53,161 192.168.1.144

# ICMP Echo Request Ping
nmap -PE 192.168.1.144

# Disable ARP/ND Ping
nmap --disable-arp-ping 192.168.1.144

# SCTP INIT Ping
nmap -PY22,80,5060 192.168.1.0/24

# IP Protocol Ping
nmap -PO1,2,4 192.168.1.144

# ICMP Timestamp and Address Mask Request
nmap -PP -PM 192.168.1.144

# Disable ARP/ND Ping
nmap --disable-arp-ping 192.168.1.144

# Ignore RST Responses During Discovery
nmap --discovery-ignore-rst 192.168.1.144

# Perform Traceroute
nmap --traceroute 192.168.1.144


-- Nmap Port Scanning --

Nmap offers a lot of different scanning methods to determine open, filtered and closed ports and to fingerprint services and operating systems. 

# TCP Connect Scan (Full Connection)
nmap -sT 192.168.1.144

# TCP SYN Scan (Half-Open)
sudo nmap -sS 192.168.1.144

# UDP Scan
nmap -sU 192.168.1.144

# SCTP INIT Scan
nmap -sY 192.168.1.144

# Null Scan (No TCP Flags Set)
nmap -sN 192.168.1.144

# FIN Scan (Only FIN Flag Set)
nmap -sF 192.168.1.144

# Xmas Scan (FIN, PSH, and URG Flags Set)
nmap -sX 192.168.1.0/24

# TCP ACK Scan (Firewall Rule Mapping)
nmap -sA 192.168.1.144

# TCP Window Scan
nmap -sW 192.168.1.144

# TCP Maimon Scan
nmap -sM 192.168.1.144

# Custom TCP Scan Flags
nmap --scanflags SYNURGACK 192.168.1.144

# SCTP COOKIE ECHO Scan
nmap -sZ 192.168.1.144

# Idle (Zombie) Scan
nmap -sI zombie_host:probeport 192.168.1.144

# IP Protocol Scan
nmap -sO 192.168.1.0/24

# FTP Bounce Scan
nmap -b user:pass@ftpserver 192.168.1.144


-- Fingerprinting Services and Operating Systems --

To identify services Nmap uses an extensive database of known services and their common ports. Certain ports are reserved for particular services. Port 22, for example, is used for SSH and port 80 for HTTP webservers.

1. Service Fingerprinting

# Basic Service Version Detection
nmap -sV 10.11.1.2
sudo nmap -sV -O 10.11.1.2

# Aggressive Service Detection (The A stands for 'Aggressive' scan options and enables OS detection, version detection, script scanning and traceroute)
sudo nmap -A 10.11.1.2
sudo nmap -A -p- 10.11.1.2

# Aggressive Service Detection
nmap -sV --version-intensity 5 10.11.1.2

# Combine Port Scan with Service Detection
nmap -sS -sV 10.11.1.2

# Identify Services on a Specific Port
nmap -p 80 -sV 10.11.1.2

# Attempt All Service Probes
nmap -sV --allports 10.11.1.2

2. OS Fingerprinting

# Enable OS Detection
nmap -O 10.11.1.2

# Enable OS Detection with Aggressive Scanning
nmap -O -A 10.11.1.2

# OS Detection with Specific Ports
nmap -p 22,80 -O 10.11.1.2

# Combine OS Detection with Service Detection
nmap -O -sV 10.11.1.2

# Guess OS if Detection is Inconclusive
nmap -O --osscan-guess 10.11.1.2

# Perform Remote OS Detection Only
nmap -sn -O 10.11.1.2


-- Scanning Port Ranges with Nmap --

By default, Nmap will only scan the 1.000 most common ports, but if you want to override the default range you can set a custom range by using the -p option followed by a port range.

nmap -p 1-100 10.11.1.235
nmap -p 137-139,445 10.11.1.235
sudo nmap -p netbios*,microsoft-ds 10.11.1.235
sudo nmap -sU -sS -p U:137-139,T:137-139,445 10.11.1.235
sudo nmap -sU -sS -p netbios*,microsoft-ds 10.11.1.235


-- Nmap Scripting Engine (NSE) --

The Nmap scripting engine is both powerful and flexible and scripts can be used to automate a variety of tasks from network discovery to vulnerability detection.

Nmap script help
nmap --script-help ftp-anon
Nmap script execution
nmap --script=[scriptname] [target host]

nmap --script http-title 10.11.12.13
nmap --script http-title,ftp-anon 10.11.12.13
nmap --script vuln 10.11.12.13
nmap --script ftp-anon --script-args ftp.user=anonymous,ftp.pass=test 10.11.12.13

nmap --script=http-robots.txt 10.11.12.13

nmap --script vuln 10.11.12.13
nmap --script ftp-brute 10.11.12.13
nmap --script ssl-enum-ciphers 10.11.12.13
nmap --script dns-brute 10.11.12.13
nmap --script http-malware-host 10.11.12.13

nmap -p 22,80,443 --script http-title 10.11.12.13
nmap -v --script vuln 10.11.12.13

nmap --script snmp-sysdescr --script-args creds.snmp=admin 10.11.12.13
nmap --script-help "afp-* and discovery"

nmap --script ssh-hostkey -d2 10.11.12.13



-- SNMP Enumeration --

The Simple Network Management Protocol (SNMP) is a protocol used in TCP/IP networks to collect and manage information about networked devices. SNMP operates in the application layer (layer 7 of the OSI model) and uses UDP port 161 to listen for requests. The SNMP protocol is supported by many types of devices including routers, switches, servers, printers, Network Attached Storage (NAS), firewalls, WLAN controllers and more. In the following sections we will be looking at the main components of SNMP managed networks, how they communicate with each other and something called the Management Information Base (MIB).

SNMP components
• Managed Device: A managed device (also referred to as a ‘node’) is a network device with the SNMP service enabled allowing unidirectional (read) or bidirectional (read/write) communication. Managed devices can be any networked device including servers, firewalls and routers.
• Agent: The agent is the software running on the managed device which is responsible for handling the communication. The agent translates device-specific configuration parameters into an SNMP format for the Network Management System.
• Network Management System (NMS): The Network Management System is the software that is actually managing and monitoring the networked devices. An SNMP managed network will always contain at least one NMS.

SNMP commands
• Read commands are sent by the NMS to nodes for monitoring purposes.
• Write commands are used to control the nodes in the network.
• The trap commands are used for unsolicited SNMP messages from a device’s agent to the NMS to inform the NMS about certain events such as errors.
• Traversal commands are used to check what information is retained on a managed device and to retrieve it.

SNMP Management Information Base (MIB)
The SNMP Management Information Base (MIB) is a database that contains information about the network device. When the Network Management System (NMS) sends a ‘get’ request for information about a managed device on the network, the agent service returns a structured table with data. This table is what is called the Management Information Base (MIB). MIB values are indexed using a series of numbers with dots. For example, MIB value 1.3.6.1.2.1.1.1 refers to the system description (sysDescr) and value 1.3.6.1.2.1.1.6 refers to the system location (sysLocation).

SNMP Community strings
The SNMP community string is like a username or password that allows access to the managed device. There are three different community strings that allow a user to set (1) read-only commands, (2) read and write commands and (3) traps. Most SNMPv1 and SNMPv2 devices ship from the factory with a default read-only community string set to ‘public’ and the read-write string set to ‘private’


-- Onesixtyone --

Onesixtyone is a very fast tool to brute force SNMP community strings and take advantage of the connectionless protocol. 
Onesixtyone sends an SNMP request and (by default) waits 10 milliseconds for a response. If the community string sent by onesixtyone to the SNMP enabled device is invalid, then the request is dropped. 
However, if a valid community string is passed to an SNMP enabled device, the device responds with the information requested (the ‘system.sysDescr.0’ value).

onesixtyone --help

# Scan a Single IP with a Community String	
onesixtyone public 192.168.1.1

# Scan Multiple IPs Using a File	
onesixtyone public -i targets.txt

# Use Multiple Community Strings	
onesixtyone -c communities.txt 192.168.1.0/24

# Specify the Number of Threads	
onesixtyone -t 16 public 192.168.1.0/24

# Scan on a Non-Default Port	
onesixtyone -p 1610 public 192.168.1.1

# Save Results to a File	
onesixtyone public 192.168.1.0/24 -w results.txt

# Combine Community and Target Files	
onesixtyone -c communities.txt -i targets.txt


-- SNMPwalk --

Snmpwalk is a great tool to query MIB values to retrieve information about managed devices, but, as a minimum, it requires a valid SNMP read-only community string. 

snmpwalk --help

# Retrieve All SNMP Information from a Device	
snmpwalk -v2c -c public 192.168.1.1

# Specify an OID for Targeted Information	
snmpwalk -v2c -c public 192.168.1.1 .1.3.6.1.2.1.1

# Use SNMPv1 Protocol	
snmpwalk -v1 -c public 192.168.1.1

# Use SNMPv3 with Authentication	
snmpwalk -v3 -l authNoPriv -u user -a MD5 -A password 192.168.1.1

# Use SNMPv3 with Authentication and Privacy	
snmpwalk -v3 -l authPriv -u user -a SHA -A authpass -x AES -X privpass 192.168.1.1

# Retrieve System Uptime	
snmpwalk -v2c -c public 192.168.1.1 sysUpTimeInstance

# Specify a Different SNMP Port	
snmpwalk -v2c -c public -p 1610 192.168.1.1

# Save Results to a File	
snmpwalk -v2c -c public 192.168.1.1 > results.txt


-- Nmap SNMP Scripts --

Nmap also contains a lot of scripts for SNMP enumeration which are worth checking out

└─$ ls -l /usr/share/nmap/scripts/snmp*
-rw-r--r-- 1 root root  7816 Nov  1  2023 /usr/share/nmap/scripts/snmp-brute.nse
-rw-r--r-- 1 root root  4388 Nov  1  2023 /usr/share/nmap/scripts/snmp-hh3c-logins.nse
-rw-r--r-- 1 root root  5216 Nov  1  2023 /usr/share/nmap/scripts/snmp-info.nse
-rw-r--r-- 1 root root 28644 Nov  1  2023 /usr/share/nmap/scripts/snmp-interfaces.nse
-rw-r--r-- 1 root root  5978 Nov  1  2023 /usr/share/nmap/scripts/snmp-ios-config.nse
-rw-r--r-- 1 root root  4156 Nov  1  2023 /usr/share/nmap/scripts/snmp-netstat.nse
-rw-r--r-- 1 root root  4431 Nov  1  2023 /usr/share/nmap/scripts/snmp-processes.nse
-rw-r--r-- 1 root root  1857 Nov  1  2023 /usr/share/nmap/scripts/snmp-sysdescr.nse
-rw-r--r-- 1 root root  2570 Nov  1  2023 /usr/share/nmap/scripts/snmp-win32-services.nse
-rw-r--r-- 1 root root  2739 Nov  1  2023 /usr/share/nmap/scripts/snmp-win32-shares.nse
-rw-r--r-- 1 root root  4713 Nov  1  2023 /usr/share/nmap/scripts/snmp-win32-software.nse
-rw-r--r-- 1 root root  2016 Nov  1  2023 /usr/share/nmap/scripts/snmp-win32-users.nse
                                                                                                                                                                                         

-- SMB Enumeration --

The Server Message Block (SMB) is a network file sharing protocol that provides access to shared files and printers on a local network. It also allows an unauthenticated inter-process communication (IPC) mechanism which enables processes to manage shared data.

SMB uses the following TCP and UDP ports:

• netbios-ns 137/tcp # NETBIOS Name Service
• netbios-ns 137/udp
• netbios-dgm 138/tcp # NETBIOS Datagram Service
• netbios-dgm 138/udp
• netbios-ssn 139/tcp # NETBIOS session service
• netbios-ssn 139/udp
• microsoft-ds 445/tcp # if you are using Active Directory


-- Null Session with rpcclient --

Rpcclient is a Linux tool used for executing client-side MS-RPC functions. A null session is a connection with a samba or SMB server that does not require authentication with a password. Null sessions were enabled by default on legacy systems but have been disabled from Windows XP SP2 and Windows Server 2003. 

rpcclient -U '' 10.11.1.17
rpcclient $> querydominfo
rpcclient $> enumdomusers

rpcclient $> queryuser [username]

rpcclient $> enum <TAB><TAB>
enumalsgroups      enumdomgroups      enumjobs           enumprinters       enumtrust
enumdata           enumdomusers       enumkey            enumprivs         
enumdataex         enumdrivers        enummonitors       enumprocdatatypes 
enumdomains        enumforms          enumports          enumprocs


# Connect to a Target with Null Session	
rpcclient -U "" -N <IP>

# List Available Shares	
rpcclient -U "" -N <IP> -c "netshareenumall"

# Enumerate Domain Users	
rpcclient -U "" -N <IP> -c "enumdomusers"

# Get User Information	
rpcclient -U "" -N <IP> -c "queryuser <user-rid>"

# List Domain Groups	
rpcclient -U "" -N <IP> -c "enumdomgroups"

# Retrieve Group Memberships	
rpcclient -U "" -N <IP> -c "querygroupmem <group-rid>"

# Dump Password Policies	
rpcclient -U "" -N <IP> -c "getdompwinfo"

# Enumerate Built-in Policies	
rpcclient -U "" -N <IP> -c "lsaquery"

# Query System Information	
rpcclient -U "" -N <IP> -c "srvinfo"

# Enumerate User RIDs	
rpcclient -U "" -N <IP> -c "lookupnames <username>"


-- RID Cycling --

Unfortunately, we cannot use the enumdomusers command on every system, if this is not supported on the target system then the command won´t display any output and total users displayed in the output of the querydominfo command is 0. If we´re unable to enumerate (all) users this way than there is another way to do this over a null session which is called RID cycling.
The relative identifier (RID) is a number of a variable length that is assigned to objects when they are created and become part of the object’s Security Identifier (SID). The SID and RID uniquely identifies an account or group within a domain. To determine a full SID, we can run the ‘lookupnames’ command and search for the domain (the SID starts with the letter S)

Key RIDs to Start Cycling

RID	Account/Group
500	Default Administrator account
501	Guest account
512	Domain Admins group
513	Domain Users group
514	Domain Guests group
1000+	Regular user accounts

rpcclient -U '' 10.11.1.17
lookupnames pbx
rpcclient $> lookupsids S-1-5-21-532510730-1394270290-3802288464-500
rpcclient $> lookupnames administrator


-- Enum4linux --

Enum4linux is a Linux alternative to enum.exe and is used to enumerate data from Windows and Samba hosts. The tool is written in Perl and is basically a wrapper for smbclient, rpcclient, net and nmblookup.

enum4linux 10.11.2.12

# Show Help Menu	
enum4linux -h

# Basic Enumeration	
enum4linux 192.168.1.1

# Perform All Enumeration Steps	
enum4linux -a 192.168.1.1

# Verbose Output	
enum4linux -v 192.168.1.1

# Enumerate Users	
enum4linux -U 192.168.1.1

# Enumerate Shared Resources	
enum4linux -s 192.168.1.1

# Enumerate Groups	
enum4linux -G 192.168.1.1

# Enumerate Password Policies	
enum4linux -P 192.168.1.1

# Get OS Information	e
num4linux -o 192.168.1.1

# Perform RID Cycling	
enum4linux -r 192.168.1.1

# Authenticated Scan (Specify User/Password)	
enum4linux -U admin -P password123 192.168.1.1

# Save Results to a File	
enum4linux 192.168.1.1 > results.txt


-- Nmap SMB Scripts --

Nmap also contains a lot of scripts that target the SMB protocol. The Nmap scripts for scanning the SMB protocol are located in the /usr/share/nmap/scripts/smb folder

└─$ ls -ls /usr/share/nmap/scripts/smb*
 4 -rw-r--r-- 1 root root  3753 Nov  1  2023 /usr/share/nmap/scripts/smb2-capabilities.nse
 4 -rw-r--r-- 1 root root  2689 Nov  1  2023 /usr/share/nmap/scripts/smb2-security-mode.nse
 4 -rw-r--r-- 1 root root  1408 Nov  1  2023 /usr/share/nmap/scripts/smb2-time.nse
 8 -rw-r--r-- 1 root root  5269 Nov  1  2023 /usr/share/nmap/scripts/smb2-vuln-uptime.nse
48 -rw-r--r-- 1 root root 45061 Nov  1  2023 /usr/share/nmap/scripts/smb-brute.nse
 8 -rw-r--r-- 1 root root  5289 Nov  1  2023 /usr/share/nmap/scripts/smb-double-pulsar-backdoor.nse
 8 -rw-r--r-- 1 root root  4840 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-domains.nse
 8 -rw-r--r-- 1 root root  5971 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-groups.nse
 8 -rw-r--r-- 1 root root  8043 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-processes.nse
28 -rw-r--r-- 1 root root 27274 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-services.nse
12 -rw-r--r-- 1 root root 12017 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-sessions.nse
 8 -rw-r--r-- 1 root root  6923 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-shares.nse
16 -rw-r--r-- 1 root root 12527 Nov  1  2023 /usr/share/nmap/scripts/smb-enum-users.nse
 8 -rw-r--r-- 1 root root  4418 Nov  1  2023 /usr/share/nmap/scripts/smb-flood.nse
 8 -rw-r--r-- 1 root root  7471 Nov  1  2023 /usr/share/nmap/scripts/smb-ls.nse
12 -rw-r--r-- 1 root root  8758 Nov  1  2023 /usr/share/nmap/scripts/smb-mbenum.nse
12 -rw-r--r-- 1 root root  8220 Nov  1  2023 /usr/share/nmap/scripts/smb-os-discovery.nse
 8 -rw-r--r-- 1 root root  4982 Nov  1  2023 /usr/share/nmap/scripts/smb-print-text.nse
 4 -rw-r--r-- 1 root root  1833 Nov  1  2023 /usr/share/nmap/scripts/smb-protocols.nse
64 -rw-r--r-- 1 root root 63596 Nov  1  2023 /usr/share/nmap/scripts/smb-psexec.nse
 8 -rw-r--r-- 1 root root  5190 Nov  1  2023 /usr/share/nmap/scripts/smb-security-mode.nse
 4 -rw-r--r-- 1 root root  2424 Nov  1  2023 /usr/share/nmap/scripts/smb-server-stats.nse
16 -rw-r--r-- 1 root root 14159 Nov  1  2023 /usr/share/nmap/scripts/smb-system-info.nse
 8 -rw-r--r-- 1 root root  7524 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-conficker.nse
 8 -rw-r--r-- 1 root root  6402 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-cve2009-3103.nse
24 -rw-r--r-- 1 root root 23154 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-cve-2017-7494.nse
 8 -rw-r--r-- 1 root root  6545 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-ms06-025.nse
 8 -rw-r--r-- 1 root root  5386 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-ms07-029.nse
 8 -rw-r--r-- 1 root root  5688 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-ms08-067.nse
 8 -rw-r--r-- 1 root root  5647 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-ms10-054.nse
 8 -rw-r--r-- 1 root root  7214 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-ms10-061.nse
 8 -rw-r--r-- 1 root root  7344 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-ms17-010.nse
 8 -rw-r--r-- 1 root root  4400 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-regsvc-dos.nse
 8 -rw-r--r-- 1 root root  6586 Nov  1  2023 /usr/share/nmap/scripts/smb-vuln-webexec.nse
 8 -rw-r--r-- 1 root root  5084 Nov  1  2023 /usr/share/nmap/scripts/smb-webexec-exploit.nse
                                                                                                                                                                                         
# Check SMB Protocol Version	
nmap --script smb-protocols -p 139,445 10.11.12.83

# Enumerate SMB Shares	
nmap --script smb-enum-shares -p 139,445 10.11.12.83

# Enumerate SMB Users	
nmap --script smb-enum-users -p 139,445 10.11.12.83

# Enumerate SMB Groups	
nmap --script smb-enum-groups -p 139,445 10.11.12.83

# Enumerate SMB Sessions	
nmap --script smb-enum-sessions -p 139,445 10.11.12.83

# Identify SMB Security Mode	
nmap --script smb-security-mode -p 139,445 10.11.12.83

# Brute Force SMB Accounts	
nmap --script smb-brute -p 139,445 10.11.12.83

# Check SMB OS Information	
nmap --script smb-os-discovery -p 139,445 10.11.12.83

# Detect Vulnerabilities (SMBv1, EternalBlue)	
nmap --script smb-vuln-* -p 139,445 10.11.12.83

 # Check SMB Signing Configuration	
nmap --script smb2-security-mode -p 445 10.11.12.83

# Enumerate SMBv2 and SMBv3 Features	
nmap --script smb2-capabilities -p 445 10.11.12.83

# Enumerate Domain Policies	
nmap --script smb-enum-domains -p 139,445 10.11.12.83

# SMB vulnerability, for instance MS08-067
nmap -p 139,445 --script=smb-vuln-ms08-067 [target ip]

# SMB vulnerability, for instance MS17-010
nmap -p 139,445 --script=smb-vuln-ms17-010

Download the script with the following command: wget https://svn.nmap.org/nmap/scripts/smb-vuln-ms17-010.nse -O /usr/share/nmap/scripts/smb-vuln-ms17-010.ns


-- Web Servers --
