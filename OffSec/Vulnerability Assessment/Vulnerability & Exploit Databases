
-- Exploit Databases --

• CVE Database
• National Vulnerability Database (NVD)
• The Common Vulnerability Scoring System (CVSS)
• Exploit Database Website
• Searchsploit by Exploit-db


We will have a look at a few different vulnerability- and exploit databases that can be used to find known vulnerabilities and exploits. We will also have a look at how the severity of vulnerabilities is scored using the Common Vulnerability Scoring System (CVSS).


-- CVE Database --

CVE stands for 'Common Vulnerabilities and Exposures' and the CVE database contains comprehensive information on all reported security vulnerabilities and exposures for a wide range of software and services.

Note: The CVE website also contains downloadable databases containing both old and new CVEs. These databases can be used to build your own tools and scripts.

https://cve.mitre.org/cve/search_cve_list.html


-- National Vulnerability Database (NVD) --

The NVD is the U.S. government repository of standards-based vulnerability management data represented using the Security Content Automation Protocol (SCAP). This data enables the automation of vulnerability management, security measurement, and compliance. The NVD includes databases of security checklist references, security-related software flaws, misconfigurations, product names, and impact metrics. The NVD scores vulnerabilities and performs analysis on CVEs that have been published.
The NVD also creates metrics and visualizations of the vulnerability data to get a high-level overview of the data, sometimes a picture is worth a thousand words. 
Another nice feature of the NVD is that they have data feeds (XML/JSON) available with vulnerability information from the entire NVD database for anyone that has use for it. The feeds allow you to keep your resources that use vulnerability information up-to-date with the NVD data. 

https://nvd.nist.gov/
https://nvd.nist.gov/general/visualizations
https://nvd.nist.gov/vuln/data-feeds


-- CVE Details --

Instead of searching for specific vulnerabilities as we did on the CVE database, we search for specific versions of software and services to determine what vulnerabilities they contain (if any).

https://www.cvedetails.com


-- The Common Vulnerability Scoring System (CVSS) --

The Common Vulnerability Scoring System is a published standard that provides a way to determine the severity of a vulnerability by scoring its characteristics. In the calculation of the CVSS score (according to the latest CVSS v3.1 specification) there are 3 metrics that determine the final score.

• Base Metrics
• Temporal Metrics
• Environmental Metrics
• Severity Rating Scale


Base Metrics
The metrics in the Base Metric group represent the intrinsic characteristics of a vulnerability that don’t change over time and are constant across environments. There are two different metrics in this group. 

The first group of metrics applies to the exploitability of the vulnerability and reflects the ease and technical requirements to exploit the vulnerability.

• Attack Vector (AV): The Attack Vector metric reflects the level of access to the vulnerability that is required vulnerability to make exploitation possible. If the vulnerable component is bound to the internet, this would result in the highest possible classification of Network (N). When the vulnerable component is bound to a physical or logical local network the metric would be scored with the Adjacent (A) score. Finally, when local or even physical access to the machine is required to attack the vulnerability, the metric is scored with Local (L) or Physical (P).
• Attack Complexity (AC): The Attack Complexity metric reflects the level of complexity and requirements involved with exploiting the vulnerability. When no specialized access conditions are required the metric is scored with Low (L). The metric is scored with High (H) if the attacker needs a substantial amount of information about the target, or requires special preparation of the target environment, or a successful attack heavily depends on conditions that are not within the attacker’s control. Factors that make an attack more complex occur when an attacker has to: perform man-in-the-middle attacks, bypass advanced exploit mitigation techniques or retrieve specific knowledge of the environments such as keys, secrets and passwords.
• Privileges Required (PR): The Privileges Required metric describes the level of privileges an attacker must possess before being able to successfully exploit the vulnerability. When no authorization is required prior to the attack, or the authentication involves using hardcoded credentials, the metric is scored with the highest classification: None (N). When the attacker requires user privileges to successfully attack the vulnerability, the metric is scored with Low (L). The highest score High (H) is assigned when the attacker requires significant control over the vulnerable component in order to successfully carry out the attack. Usually this involves having administrative rights on the component.
• User Interaction (UI): The User Interaction metric encompasses the requirement of user interaction to successfully attack the vulnerability. The values applied to this metric are None (N) for no user interaction required and Required (R) when successful exploitation requires some kind of action to be performed by a user other than the attacker.
• Scope (S): The scope metric indicates if other resources are affected by an exploited vulnerability, for example when a database is compromised through a specific application, is the attacker able to access only that database or others too? The base score is the greatest when scope changes can occur. The metric values are Unchanged (U) when the scope remains unchanged after exploiting a vulnerability and Changed (C) when the scope is changed.

The second group of metrics, the impact metrics, apply to the impact on the successful exploitation of a vulnerability. The impact metrics are scored with High, Low or None based on the impact on the following metrics:

• Confidentiality (C) impact: The Confidentiality metric states if, what and how much information was disclosed to an unauthorized user. Was there some loss of confidentiality as the attacker had some kind of access to information with low impact or was there a total loss of confidentiality because the attacker had access to all customer data on a web server for example.
• Integrity (I) impact: The Integrity metric determines the impact on the trustworthiness and veracity of information involved with the vulnerability. The impact of this metric is determined by if the attacker is able to modify all files on a system, resulting in a total loss of integrity, or was the impact limited resulting in a lower impact on integrity.
• Availability (A) impact: The Availability metric applies to the loss of availability for the affected component that contains the vulnerability. Think of a vulnerable network device that goes down as a result of an exploited vulnerability causing downtime on the network resulting in a total loss of availability. A much lower impact is when there is only a performance reduction or there a temporary interruption in resource availability resulting in a low impact for the availability metric.


Temporal Metrics
The Temporal metrics measure the current state of exploit techniques or availability of exploits, the existence of patches to solve the security issue or workarounds to mitigate the issue, or the confidence in the existence of the vulnerability. Unlike the base metrics, the Temporal metrics can change over time, for example when a working exploit becomes publicly available or threat actors actively attack the vulnerability.

• Exploit Code Maturity (E): The Exploit Code Maturity metric is the likelihood of the vulnerability being attacked based on the availability of working exploit code. The metric is scored as High when there is a working exploit code publicly available or when there is no exploit required as the vulnerability can be triggered manually. The other scores refer to working exploit code in case the vulnerability is present (Functional), Proof of Concept code available which requires substantial modifications or no exploit code available/theoretical vulnerability (Unproven). The Not Defined (X) score is applied when there is not enough information available to use any of the other scores.
• Remediation Level (RL): The Remediation metric defines if there are patches or workarounds are available to fix or mitigate the vulnerability. The score applied to this metric involves the stage of the Remediation level: Unavailable (U), Workaround (W), Temporary Fix (T) or Official Fix (O). The less official and permanent a fix, the higher the vulnerability score where Unavailable (U) or Not Defined (X) is the highest and Official Fix (O) the lowest.
• Report Confidence (RC): The Report Confidence metric measures the degree of confidence in the existence of the vulnerability and the credibility of the known technical details. The highest possible rating for this metric is Confirmed (C) which means that the vulnerability has detailed reports and can be reproduced. The Reasonable (R) score is applied when there are significate details published about the vulnerability along with a Proof of Concept. The Unknown (U) score is applied when there are uncertainties about the cause and the nature of the vulnerability


Environmental Metrics
The environmental metrics represent metric values that apply to a specific environment or implementation which allows the security analyst to override individual Base metrics. The effect on the Environmental score is determined by the corresponding Base metrics. An example of a situation where it is useful to override base metrics is when a vulnerable service is running with administrative privileges by default where a comprise results in high scores for Confidentiality, Integrity, and Availability impacts. The same service may be running with lower privileges on the specific environment resulting in different, lower scores for the Confidentiality, Integrity, and Availability impact metrics impacting the overall score.






- Severity Rating Scale -

After all metrics have been scored and equation calculates a final score that indicates the severity of a specific vulnerability. 

The table for CVSS Version 3.1
Rating 	    CVSS Score
None 	      0
Low 	       0.1 – 3.9
Medium 	    4.0 – 6.9
High 	      7.0 – 8.9
Critical 	  9.0 – 10.0

The table for CVSS Version 2.0 
Rating 	   CVSS Score
Low 	      0.1 – 3.9
Medium 	   4.0 – 6.9
High 	     7.0 – 10.0

https://www.first.org/cvss/calculator/3.1
https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator
https://www.first.org/cvss/specification-document


-- Exploit Database Website --

A great source for finding known vulnerabilities and exploits is the Exploit database (Exploit-db) maintained by Offensive Security. Exploit-db offers a huge number of exploit details, papers and shellcodes and can be searched by both CVE and OSVDB identifiers. One great benefit of Exploit-db is that many of the exploits listed also contain the vulnerable software which can be used to test exploits locally to see how they work and whether they require any modification
The exploits on Exploit-db can be written in many different programming languages (varying from C to Python, Perl and Ruby) and often require small modifications to run successfully against a specific target. If you are unfamiliar with reading software code you will find it very helpful to learn at least the basic principles and syntax. 
Modifications are often needed to match target-specific parameters (such as an IP address or payload) or to remedy small ‘bugs’ which are sometimes introduced on purpose. These deliberate ‘bugs’ are often there as a precaution against just anyone (read: ‘script kiddies’) using the exploit out of the box without knowing what they are doing and causing indiscriminate damage. The code may also have been intended only as a proof of concept (POC) for testing the existence of a vulnerability without including harmful payloads (such as a reverse shell).

https://www.exploit-db.com/

































































