
-- Wireshark Filters for Detecting Suspect Scan Activities --

TCP SYN Scan	
Detects scans using SYN packets to initiate connections (common Nmap scan type).
tcp.flags.syn == 1 && tcp.flags.ack == 0 && tcp.flags.fin == 0 && tcp.flags.rst == 0 && tcp.flags.urg == 0 && tcp.flags.psh == 0

TCP SYN-ACK Scan	
Detects SYN-ACK responses, indicating responses to SYN scans.	
tcp.flags.syn == 1 && tcp.flags.ack == 1

TCP FIN Scan	
Detects scans where only FIN flags are sent to attempt stealth scans.	
tcp.flags.fin == 1 && tcp.flags.urg == 0 && tcp.flags.psh == 0 && tcp.flags.ack == 0 && tcp.flags.rst == 0 && tcp.flags.syn == 0

TCP NULL Scan	
Detects NULL scans where no TCP flags are set, trying to bypass firewalls.	
tcp.flags == 0x000

TCP XMAS 
Scan	Detects scans using FIN, PSH, and URG flags (XMAS scan).	
tcp.flags.fin == 1 && tcp.flags.urg == 1 && tcp.flags.psh == 1

UDP Scan	
Detects UDP-based scans (usually no response if ports are closed).	
udp

ICMP Echo Requests	
Detects ICMP ping sweeps (host discovery scans).	
icmp.type == 8

Port Sweep	
Detects connections to multiple different ports on the same host (indicates port scanning).	
tcp.flags.syn == 1 && ip.dst == <target_ip> or ip.dst == <target_ip> && tcp

Host Sweep	
Detects connection attempts to many different IP addresses (host discovery).	
ip.src == <scanner_ip> && ip.dst != <scanner_ip>

ARP Scan	
Detects ARP sweeps used to discover hosts in the local network.	
arp


-- Wireshark Filters for Nmap Firewall Evasion Scans --

TCP ACK Scan	
Detects open ports by sending TCP ACK packets. Firewalls usually don't block ACK packets.	
tcp.flags.ack == 1 && tcp.flags.syn == 0 && tcp.flags.fin == 0 && tcp.flags.rst == 0 && tcp.flags.psh == 0 && tcp.flags.urg == 0

TCP Window Scan	
Similar to the ACK scan but checks window size to determine if ports are open.	
tcp.flags.ack == 1 && tcp.window_size > 0

TCP Maimon Scan	
Uses FIN/ACK flags, trying to bypass some firewalls that block SYN scans.	
tcp.flags.fin == 1 && tcp.flags.ack == 1 && tcp.flags.syn == 0 && tcp.flags.rst == 0

Fragmented Packets Scan	
Breaks packets into small fragments to bypass firewalls that don't reassemble small packets.	
ip.flags.mf == 1 or ip.frag_offset > 0

Idle Scan	
An advanced stealth scan that uses a third-party zombie host to send packets to the target.	
> Check for unusual packet sequences, especially with IP ID values that increase at irregular rates.

Custom TTL Scan	
Manipulates the TTL field to evade detection by firewalls by using non-standard TTL values.	
ip.ttl == <custom_value> (check for unusual TTL values, e.g., very low or very high values)

Bouncing Scans (Proxy)	
Detects scans using proxy servers or relays to avoid direct detection by firewalls.	
> Look for unusual source IP addresses that are known proxies or third-party hosts.

Decoy Scan	
Nmap sends packets using decoy IP addresses to hide the real scanner.	
> Multiple different source IP addresses targeting the same destination, often in rapid sequence.

TCP Null Scan	
Sends packets with no TCP flags set, attempting to bypass some firewalls.	
tcp.flags == 0x000

XMAS Scan	
Sends packets with FIN, PSH, and URG flags set, aiming to confuse firewalls.	
tcp.flags.fin == 1 && tcp.flags.urg == 1 && tcp.flags.psh == 1

FIN Scan	
Uses only FIN packets to detect open ports, bypassing certain firewalls.	
tcp.flags.fin == 1 && tcp.flags.ack == 0 && tcp.flags.syn == 0 && tcp.flags.rst == 0 && tcp.flags.urg == 0 && tcp.flags.psh == 0


-- Nmap Firewall Scan Detection Filters for IPv6 --

TCP SYN Scan (IPv6)	
Detects SYN scans (common Nmap scan) over IPv6.	
tcp.flags.syn == 1 && tcp.flags.ack == 0 && ipv6

TCP FIN Scan (IPv6)	
Detects FIN scans on IPv6 networks.	
tcp.flags.fin == 1 && tcp.flags.ack == 0 && ipv6

TCP NULL Scan (IPv6)	
Detects NULL scans (no TCP flags) targeting IPv6.	
tcp.flags == 0x000 && ipv6

TCP XMAS Scan (IPv6)	
Detects XMAS scans (FIN, PSH, URG flags set) on IPv6 networks.	
tcp.flags.fin == 1 && tcp.flags.urg == 1 && tcp.flags.psh == 1 && ipv6

UDP Scan (IPv6)	
Detects UDP scans targeting IPv6 addresses.	
udp && ipv6

ICMPv6 Echo Requests	
Detects ICMPv6 ping sweeps (host discovery scans using IPv6).	
icmpv6.type == 128

IPv6 Router Solicitation	
Detects IPv6 router solicitation messages (can be used to discover routers).	
icmpv6.type == 133

IPv6 Neighbor Solicitation	
Detects IPv6 neighbor solicitation messages (used for IPv6 host discovery).	
icmpv6.type == 135

IPv6 Neighbor Advertisement	
Detects neighbor advertisements, which could reveal IPv6 hosts in the network.	
icmpv6.type == 136

Port Sweep (IPv6)	
Detects attempts to scan multiple ports on the same IPv6 target.	
tcp.flags.syn == 1 && ipv6 && ip.dst == <target_ipv6_address>

Host Sweep (IPv6)	
Detects scanning attempts across multiple IPv6 addresses.	
ipv6.src == <scanner_ipv6> && ipv6.dst != <scanner_ipv6>

IPv6 Hop Limit Exceeded	
Detects ICMPv6 hop limit exceeded messages (can reveal probing activity in IPv6 networks).	
icmpv6.type == 3 && icmpv6.code == 0

IPv6 Fragmentation	
Detects fragmented IPv6 packets (often a sign of evasion techniques used by Nmap scans).	
ipv6.nxt == 44
